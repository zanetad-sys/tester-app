import json
import streamlit as st
import pandas as pd
import requests

st.set_page_config(page_title="Jak se st√°t testerem", page_icon="‚úÖ", layout="wide")

# ========== STAV (checkboxy) ==========
if "done" not in st.session_state:
    st.session_state.done = {
        "manual_vs_auto": False,
        "web_basics": False,
        "sql": False,
        "git": False,
        "jira": False,
        "testcases": False,
        "api": False,
        "auto": False,
        "projects": False,
        "readme": False,
        "cv": False,
    }

def percent():
    d = st.session_state.done
    return int(100 * sum(d.values()) / len(d)) if d else 0

# ========== MENU V SIDEBARU ==========
menu = st.sidebar.radio(
    "üìö Navigace",
    [
        "√övod",
        "Z√°klady",
        "N√°stroje",
        "Portfolio",
        "Mini kv√≠z",
        "Timeline",
        "Zdroje",
        "üìñ Teorie",
        "üß≠ QA tah√°k",
        "üåê API tester",
    ],
    index=0,
)

# ========== STR√ÅNKY ==========
def page_uvod():
    st.title("Jak se st√°t testerem ‚Äì mini pr≈Øvodce")
    st.write("Postupnƒõ a v klidu. Z√°klady a praxe. Za≈°krt√°vej splnƒõn√© kroky a sleduj postup.")
    col1, col2 = st.columns([1, 2], vertical_alignment="center")
    with col1:
        st.metric("Splnƒõno", f"{percent()} %")
        if st.button("Resetuj postup"):
            for k in st.session_state.done:
                st.session_state.done[k] = False
            st.rerun()
    with col2:
        st.info("Tip: Pou≈æ√≠vej menu vlevo. Ka≈æd√° sekce se zobraz√≠ tady v hlavn√≠ ƒç√°sti.")

def page_zaklady():
    st.header("1) Z√°klady QA ‚Äì kompletn√≠ p≈ôehled")

    # ============ BLOK 1: Co je QA =============
    st.subheader("üéØ Co je QA a role testera")
    st.session_state.done["qa_definition"] = st.checkbox(
        "Co je testov√°n√≠ / QA",
        value=st.session_state.done.get("qa_definition", False),
    )
    st.session_state.done["qa_roles"] = st.checkbox(
        "Role: tester vs. v√Ωvoj√°≈ô vs. produkt√°k",
        value=st.session_state.done.get("qa_roles", False),
    )
    st.session_state.done["qa_sdlc"] = st.checkbox(
        "≈Ωivotn√≠ cyklus v√Ωvoje softwaru (SDLC, agiln√≠, waterfall)",
        value=st.session_state.done.get("qa_sdlc", False),
    )
    st.session_state.done["qa_types"] = st.checkbox(
        "Typy test≈Ø ‚Äì √∫rovnƒõ (unit, integraƒçn√≠, syst√©mov√©, akceptaƒçn√≠)",
        value=st.session_state.done.get("qa_types", False),
    )
    st.session_state.done["qa_vv"] = st.checkbox(
        "Rozd√≠l mezi verifikac√≠ a validac√≠",
        value=st.session_state.done.get("qa_vv", False),
    )
    st.session_state.done["qa_sevpri"] = st.checkbox(
        "Severity vs. priorita bug≈Ø",
        value=st.session_state.done.get("qa_sevpri", False),
    )

    with st.expander("üìñ Vysvƒõtlivky ‚Äì QA z√°klady"):
        st.markdown("""
- **QA** = zaji≈°tƒõn√≠ kvality (procesy + testov√°n√≠).  
- **Role testera** = hled√° chyby, p≈ôem√Ω≈°l√≠ za u≈æivatele, zaji≈°≈•uje, ≈æe produkt odpov√≠d√° po≈æadavk≈Øm.  
- **SDLC** = waterfall (f√°ze po sobƒõ) vs. agile (Scrum, iterace).  
- **Verifikace** = dƒõl√°me vƒõci spr√°vnƒõ, **Validace** = dƒõl√°me spr√°vn√© vƒõci.  
- **Severity** = dopad chyby, **Priorita** = jak rychle ji opravit.
""")

    st.divider()

    # ============ BLOK 2: Technick√© minimum ============
    st.subheader("üñ•Ô∏è Technick√© minimum")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.session_state.done["tech_web"] = st.checkbox(
            "Web (HTML, CSS, JS)", value=st.session_state.done.get("tech_web", False)
        )
        st.session_state.done["tech_sql"] = st.checkbox(
            "Datab√°ze + SQL", value=st.session_state.done.get("tech_sql", False)
        )
    with col2:
        st.session_state.done["tech_git"] = st.checkbox(
            "Git/GitHub", value=st.session_state.done.get("tech_git", False)
        )
        st.session_state.done["tech_logs"] = st.checkbox(
            "Logy (application/system/security)",
            value=st.session_state.done.get("tech_logs", False),
        )
    with col3:
        st.session_state.done["tech_http"] = st.checkbox(
            "HTTP/HTTPS z√°klady", value=st.session_state.done.get("tech_http", False)
        )
        st.session_state.done["tech_api"] = st.checkbox(
            "API (REST/JSON, SOAP/XML)",
            value=st.session_state.done.get("tech_api", False),
        )

    with st.expander("üìñ Vysvƒõtlivky ‚Äì Technick√© minimum"):
        st.markdown("""
- **Web** = HTML struktura, CSS styly, JS logika.  
- **SQL** = SELECT, JOIN, INSERT, UPDATE, kl√≠ƒçe.  
- **Git** = commit, push, pull request.  
- **Logy** = application (chyby appky), system (OS, slu≈æby), security (p≈ôihl√°≈°en√≠).  
- **HTTP** = request/response, status k√≥dy (200, 404, 500).  
- **API** = REST (JSON, lehk√©), SOAP (XML, enterprise).
""")

    st.divider()

    # ============ BLOK 3: Praktick√© n√°stroje ============
    st.subheader("üõ†Ô∏è Praktick√© n√°stroje")
    st.session_state.done["tools_bugtracking"] = st.checkbox(
        "Bug tracking (Jira, Trello, Bugzilla)",
        value=st.session_state.done.get("tools_bugtracking", False),
    )
    st.session_state.done["tools_testmgmt"] = st.checkbox(
        "Test management (TestRail, Xray, Excel ≈°ablony)",
        value=st.session_state.done.get("tools_testmgmt", False),
    )
    st.session_state.done["tools_postman"] = st.checkbox(
        "Postman (API testing) / SOAP UI",
        value=st.session_state.done.get("tools_postman", False),
    )
    st.session_state.done["tools_devtools"] = st.checkbox(
        "DevTools v prohl√≠≈æeƒçi (network, console, cookies)",
        value=st.session_state.done.get("tools_devtools", False),
    )

    with st.expander("üìñ Vysvƒõtlivky ‚Äì Praktick√© n√°stroje"):
        st.markdown("""
- **Jira/Trello** = evidence √∫kol≈Ø a bug≈Ø.  
- **TestRail/Xray/Excel** = spr√°va test≈Ø a v√Ωsledk≈Ø.  
- **Postman/SOAP UI** = testov√°n√≠ API.  
- **DevTools** = prohl√≠≈æen√≠ s√≠≈•ov√Ωch po≈æadavk≈Ø, log≈Ø a cookies.
""")

    st.divider()

    # ============ BLOK 4: Automatizace + Bonus ============
    st.subheader("ü§ñ Automatizace + Bonus")
    st.session_state.done["auto_python"] = st.checkbox(
        "Z√°klady Pythonu/jin√©ho jazyka",
        value=st.session_state.done.get("auto_python", False),
    )
    st.session_state.done["auto_framework"] = st.checkbox(
        "Framework (pytest, Playwright, Selenium)",
        value=st.session_state.done.get("auto_framework", False),
    )
    st.session_state.done["auto_ci"] = st.checkbox(
        "Principy CI/CD (GitHub Actions, GitLab CI)",
        value=st.session_state.done.get("auto_ci", False),
    )
    st.session_state.done["bonus_security"] = st.checkbox(
        "Z√°klady bezpeƒçnostn√≠ho testov√°n√≠ (XSS, SQLi)",
        value=st.session_state.done.get("bonus_security", False),
    )
    st.session_state.done["bonus_performance"] = st.checkbox(
        "Performance testy (JMeter, k6 ‚Äì teorie)",
        value=st.session_state.done.get("bonus_performance", False),
    )
    st.session_state.done["bonus_cloud"] = st.checkbox(
        "Cloud/prost≈ôed√≠ (docker, staging vs. prod)",
        value=st.session_state.done.get("bonus_cloud", False),
    )
    st.session_state.done["bonus_linux"] = st.checkbox(
        "Z√°klady Linux shellu (navigace, grep, logy)",
        value=st.session_state.done.get("bonus_linux", False),
    )

    with st.expander("üìñ Vysvƒõtlivky ‚Äì Automatizace a Bonus"):
        st.markdown("""
- **Python/Java** = z√°kladn√≠ syntaxe, funkce, testovac√≠ skripty.  
- **Pytest/Playwright/Selenium** = frameworky pro automatizaci.  
- **CI/CD** = kontinu√°ln√≠ integrace a nasazov√°n√≠ (nap≈ô. GitHub Actions).  
- **Security** = z√°kladn√≠ √∫toky jako XSS, SQLi na demo aplikac√≠ch.  
- **Performance** = JMeter, k6 pro z√°tƒõ≈æov√© testy.  
- **Cloud** = docker, prost≈ôed√≠ dev/stage/prod.  
- **Linux** = pr√°ce v shellu, logy, grep.
""")

    # Checklist download
    all_items = [k for k, v in st.session_state.done.items() if k.startswith(("qa_", "tech_", "tools_", "auto_", "bonus_"))]
    checklist = "\n".join(f"- {k}" for k in all_items)
    st.download_button("‚¨áÔ∏è St√°hnout checklist v≈°ech z√°klad≈Ø", checklist, "qa-zaklady-checklist.txt")


def page_nastroje():
    st.header("2) N√°stroje a praxe")
    st.session_state.done["jira"] = st.checkbox(
        "Jira/Trello ‚Äì evidence √∫kol≈Ø",
        value=st.session_state.done["jira"],
    )
    st.session_state.done["testcases"] = st.checkbox(
        "Test cases a bug reporting",
        value=st.session_state.done["testcases"],
    )
    st.session_state.done["api"] = st.checkbox(
        "API testov√°n√≠ (Postman)",
        value=st.session_state.done["api"],
    )
    st.session_state.done["auto"] = st.checkbox(
        "Automatizace ‚Äì Python + Playwright/pytest",
        value=st.session_state.done["auto"],
    )

def page_portfolio():
    st.header("3) Portfolio a pr√°ce")
    st.session_state.done["projects"] = st.checkbox(
        "Miniprojekty na GitHubu",
        value=st.session_state.done["projects"],
    )
    st.session_state.done["readme"] = st.checkbox(
        "README a uk√°zkov√© bug reporty",
        value=st.session_state.done["readme"],
    )
    st.session_state.done["cv"] = st.checkbox(
        "CV + LinkedIn ‚Äì zd≈Øraznit praxi",
        value=st.session_state.done["cv"],
    )

    st.divider()
    with st.form("plan"):
        st.subheader("üó∫Ô∏è T√Ωdenn√≠ pl√°n")
        jmeno = st.text_input("Jm√©no (voliteln√©)", "")
        hodin = st.slider("Kolik hodin t√Ωdnƒõ zvl√°dne≈°?", 1, 20, 5)
        fokus = st.selectbox(
            "Hlavn√≠ fokus na t√Ωden",
            ["Z√°klady", "API testov√°n√≠", "Automatizace", "Portfolio/README"],
        )
        submit = st.form_submit_button("Vygenerovat pl√°n")
        if submit:
            body = {
                "Z√°klady": [
                    "‚Ä¢ 2 h Git + GitHub",
                    "‚Ä¢ 2 h HTML/CSS/JS",
                    "‚Ä¢ 1 h SQL",
                ],
                "API testov√°n√≠": [
                    "‚Ä¢ 2 h Postman z√°klady",
                    "‚Ä¢ 2 h psan√≠ request≈Ø",
                    "‚Ä¢ 1 h dokumentace",
                ],
                "Automatizace": [
                    "‚Ä¢ 2 h Python",
                    "‚Ä¢ 2 h Playwright/pytest",
                    "‚Ä¢ 1 h refaktor",
                ],
                "Portfolio/README": [
                    "‚Ä¢ 2 h README + uk√°zky",
                    "‚Ä¢ 2 h miniprojekt",
                    "‚Ä¢ 1 h polishing",
                ],
            }
            st.success((f"{jmeno}, " if jmeno else "") + f"tv≈Øj pl√°n na {hodin} h/t√Ωden:")
            st.write("\n".join(body[fokus]))

def page_kviz():
    st.header("üß© Mini kv√≠z")
    odp = st.radio(
        "Co je Pull Request (PR) na GitHubu?",
        [
            "P≈ô√≠m√© nahr√°n√≠ k√≥du do main",
            "N√°vrh zmƒõn z vƒõtve, kter√Ω ostatn√≠ zkontroluj√≠ a slouƒç√≠",
            "Z√°loha repozit√°≈ôe",
        ],
    )
    if st.button("Vyhodnotit"):
        if odp == "N√°vrh zmƒõn z vƒõtve, kter√Ω ostatn√≠ zkontroluj√≠ a slouƒç√≠":
            st.success("Spr√°vnƒõ! üëç")
        else:
            st.error("Je≈°tƒõ jednou: PR je n√°vrh zmƒõn z vƒõtve, kter√Ω se po schv√°len√≠ mergne do main.")

def page_timeline():
    st.header("üóìÔ∏è Doporuƒçen√° timeline")
    timeline = pd.DataFrame(
        {
            "T√Ωden": ["1", "2", "3", "4"],
            "Fokus": ["Z√°klady + Git", "API testov√°n√≠", "Automatizace", "Portfolio/README"],
        }
    )
    st.table(timeline)

def page_zdroje():
    st.header("üìö U≈æiteƒçn√© zdroje")
    zdroje = pd.DataFrame(
        {
            "T√©ma": ["Git", "Postman (API)", "Playwright", "Streamlit"],
            "Tip": [
                "Proch√°zej vlastn√≠ repozit√°≈ôe a dƒõlej mal√© commity.",
                "Tr√©nuj collection + environment + test scripts.",
                "Zaƒçni s UI testy, pak p≈ôidej fixtures a parametrizaci.",
                "Rychl√© prototypy a dashboardy ‚Äì tak jako tahle appka!",
            ],
        }
    )
    st.dataframe(zdroje, use_container_width=True)

def page_teorie():
    st.header("üìñ Z√°kladn√≠ teorie testov√°n√≠")

    st.subheader("Typy test≈Ø")
    st.markdown("""
- **Funkƒçn√≠** vs. **Nefunkƒçn√≠**  
- **Smoke**, **Sanity**, **Regresn√≠**  
- **Jednotkov√© (unit)**, **Integraƒçn√≠**, **Syst√©mov√©**, **Akceptaƒçn√≠**
""")

    st.subheader("Verifikace vs. Validace")
    st.markdown("""
- **Verifikace** = Ovƒõ≈ôuji, zda produkt odpov√≠d√° specifikaci (*Stav√≠me spr√°vnƒõ?*).  
- **Validace** = Ovƒõ≈ôuji, zda produkt spl≈àuje pot≈ôeby u≈æivatele (*Stav√≠me spr√°vnou vƒõc?*).
""")

    st.subheader("Severity vs. Priorita")
    st.markdown("""
- **Severity** = jak v√°≈æn√° je chyba (dopad).  
- **Priorita** = jak rychle se m√° opravit (po≈ôad√≠ pr√°ce).
""")

    st.subheader("Bug vs. Defect vs. Failure")
    st.markdown("""
- **Bug** = chyba nalezen√° p≈ôi testov√°n√≠.  
- **Defect** = nesoulad se specifikac√≠ (vƒõt≈°inou v k√≥du).  
- **Failure** = projev chyby v bƒõ≈æ√≠c√≠m syst√©mu.
""")

    st.subheader("API z√°klady")
    st.markdown("""
- **API** = rozhran√≠ pro komunikaci mezi syst√©my.  
- **HTTP metody**: GET, POST, PUT, PATCH, DELETE  
- **Status k√≥dy**: 200 OK, 201 Created, 204 No Content, 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 500 Server Error  
- **REST + JSON** (lehk√©, bƒõ≈æn√©), **SOAP + XML** (form√°lnƒõj≈°√≠, ƒçasto enterprise).
""")

    st.subheader("Metody testov√°n√≠ (Black/White/Gray box)")
    st.markdown("""
- **Blackbox** = testuji vstupy/v√Ωstupy, ne≈ôe≈°√≠m k√≥d.  
- **Whitebox** = zn√°m vnit≈ôn√≠ strukturu k√≥du.  
- **Graybox** = nƒõco z obou (nap≈ô. zn√°≈° sch√©mata DB, logiku).
""")

    st.subheader("SQL ‚Äì z√°klady")
    st.markdown("""
- **DDL**: `CREATE`, `ALTER`, `DROP`  
- **DML**: `INSERT`, `UPDATE`, `DELETE`  
- **DQL**: `SELECT`  
- **DCL**: `GRANT`, `REVOKE`  
- **JOIN**: `INNER`, `LEFT`, `RIGHT`  
- **Prim√°rn√≠ kl√≠ƒç** = jednoznaƒçn√Ω identifik√°tor z√°znamu  
- **Ciz√≠ kl√≠ƒç** = odkaz na prim√°rn√≠ kl√≠ƒç jin√© tabulky
""")

    st.subheader("Logy ‚Äì typy")
    st.markdown("""
- **Application log** (chyby v aplikaci)  
- **System log** (OS, slu≈æby)  
- **Security log** (p≈ôihl√°≈°en√≠, audit)
""")

    st.subheader("BDD ‚Äì Behavior Driven Development")
    st.markdown("""
**Given** (p≈ôedpoklad) ‚Äì **When** (akce) ‚Äì **Then** (v√Ωsledek)

P≈ô√≠klad:  
*Given u≈æivatel je p≈ôihl√°≈°en*  
*When klikne na ‚ÄûOdhl√°sit‚Äú*  
*Then syst√©m ho odhl√°s√≠ a p≈ôesmƒõruje na login str√°nku*.
""")

def page_qatahaky():
    st.header("üß≠ QA tah√°k (proces + ≈°ablony)")
    st.markdown("Rychl√© tah√°ky pro praxi testera. St√°hni si ≈°ablony a pou≈æ√≠vej ve sv√Ωch projektech.")

    st.markdown("### 0) P≈ô√≠prava")
    st.write("""
- **C√≠l & rozsah**, **Rizika/priorita**, **Prost≈ôed√≠ & data**, **DoD**
""")
    st.markdown("### 1) N√°vrh test≈Ø")
    st.write("""
- Techniky: ekvivalence, hranice, stavov√© p≈ôechody, pairwise  
- √örovnƒõ: unit/API/UI; typy: funkƒçn√≠, negativn√≠, regresn√≠, smoke  
- Minimal viable set: nejd≈ô√≠v **smoke**, pak kritick√© cesty, pak okraje  
""")
    st.markdown("### 2) Proveden√≠")
    st.write("""
- Scripted + Exploratory ~ 70/30 (timebox 30‚Äì60 min)  
- Evidence: PASS/FAIL, screenshot/log/HAR u fail≈Ø  
- Verzov√°n√≠: dr≈æ v Gitu (README, `tests/`, `testcases.xlsx`)  
""")
    st.markdown("### 3) Bug report ‚Äì ≈°ablona")
    bug = """N√°zev: [Checkout] 500 p≈ôi pr√°zdn√©m ko≈°√≠ku
Prost≈ôed√≠: test, v1.2.3 (build #456), Chrome 127
Kroky: 1) Otev≈ô√≠t /checkout 2) Kliknout ‚ÄûZaplatit‚Äú s pr√°zdn√Ωm ko≈°√≠kem
Oƒçek√°van√©: Validace ‚ÄûKo≈°√≠k je pr√°zdn√Ω‚Äú
Aktu√°ln√≠: HTTP 500, b√≠l√° str√°nka
D≈Økazy: screenshot.png, network.har
Sev/Pri: High / P1  Pozn.: Regrese od v1.2.2
"""
    st.code(bug, language="markdown")
    st.download_button("‚¨áÔ∏è St√°hnout Bug report", bug, file_name="bug-report.md")

    st.markdown("### Test case ‚Äì ≈°ablona")
    tc = """ID: TC-LOGIN-001
C√≠l: P≈ôihl√°≈°en√≠ validn√≠ho u≈æivatele
Kroky: 1) Otev≈ô√≠t /login  2) Vyplnit platn√© √∫daje  3) Odeslat
Oƒçek√°van√©: P≈ôesmƒõrov√°n√≠ na /dashboard
Priorita: P1  Data: user@test.com / *****  Stav: PASS/FAIL
"""
    st.code(tc, language="markdown")
    st.download_button("‚¨áÔ∏è St√°hnout Test Case", tc, file_name="test-case.md")

    st.markdown("### PR checklist")
    pr = """PR checklist:
- [ ] Projde lok√°ln√≠ smoke
- [ ] Test data/seed aktualizov√°ny
- [ ] P≈ôidan√©/zmƒõnƒõn√© testy
- [ ] Bezpeƒçnostn√≠ dopad zhodnocen
- [ ] Aktualizov√°n README/CHANGELOG
"""
    st.code(pr, language="markdown")
    st.download_button("‚¨áÔ∏è St√°hnout PR checklist", pr, file_name="pr-checklist.md")

def page_api_tester():
    st.header("üåê API dokumentace + rychl√Ω tester")

    with st.expander("üìñ Dokumentace (demo: JSONPlaceholder)"):
        st.markdown("""
**Todos API**
- `GET /todos/1` ‚Üí detail jednoho √∫kolu  
- `GET /todos`   ‚Üí seznam √∫kol≈Ø  
- `POST /todos`  ‚Üí vytvo≈ô√≠ nov√Ω √∫kol (JSON body)

**Users API**
- `GET /users/1` ‚Üí detail u≈æivatele  
- `GET /users`   ‚Üí seznam u≈æivatel≈Ø

Z√°kladn√≠ URL: `https://jsonplaceholder.typicode.com`
""")

    colA, colB = st.columns([3, 1])
    with colA:
        url = st.text_input("URL endpointu", "https://jsonplaceholder.typicode.com/todos/1")
    with colB:
        metoda = st.selectbox("Metoda", ["GET", "POST", "PUT", "PATCH", "DELETE"])

    hdrs_default = "Content-Type: application/json"
    headers_text = st.text_area("HTTP headers (Kl√≠ƒç: Hodnota na ≈ô√°dek)", hdrs_default, height=80)
    body_text = st.text_area("Request JSON body (pro POST/PUT/PATCH)", '{\n  "title": "Test √∫kol",\n  "completed": false\n}', height=140)

    exp_col1, exp_col2 = st.columns(2)
    with exp_col1:
        expected_status = st.number_input("Oƒçek√°van√Ω status k√≥d", value=200, step=1)
    with exp_col2:
        validate_json = st.checkbox("Validovat JSON odpovƒõƒè", value=False)

    def parse_headers(text: str) -> dict:
        headers = {}
        for line in text.splitlines():
            if not line.strip() or ":" not in line:
                continue
            k, v = line.split(":", 1)
            headers[k.strip()] = v.strip()
        return headers

    def parse_json_or_none(text: str):
        try:
            return json.loads(text)
        except Exception:
            return None

    if st.button("Spustit dotaz"):
        headers = parse_headers(headers_text)
        json_body = parse_json_or_none(body_text)

        try:
            if metoda == "GET":
                r = requests.get(url, headers=headers, timeout=10)
            elif metoda == "POST":
                r = requests.post(url, headers=headers, json=json_body, timeout=10)
            elif metoda == "PUT":
                r = requests.put(url, headers=headers, json=json_body, timeout=10)
            elif metoda == "PATCH":
                r = requests.patch(url, headers=headers, json=json_body, timeout=10)
            elif metoda == "DELETE":
                r = requests.delete(url, headers=headers, timeout=10)
            else:
                r = None
                st.error("Nezn√°m√° metoda.")

            if r is not None:
                st.write("**Status k√≥d:**", r.status_code)
                if r.headers.get("Content-Type", "").startswith("application/json"):
                    try:
                        st.json(r.json())
                    except Exception:
                        st.text(r.text[:2000])
                else:
                    st.text(r.text[:2000])

                # jednoduch√© PASS/FAIL
                if r.status_code == int(expected_status):
                    st.success(f"PASS ‚Äì status {r.status_code} = oƒçek√°van√Ω {expected_status}")
                else:
                    st.error(f"FAIL ‚Äì status {r.status_code} ‚â† oƒçek√°van√Ω {expected_status}")

                if validate_json:
                    try:
                        _ = r.json()
                        st.info("JSON odpovƒõƒè vypad√° validnƒõ ‚úÖ")
                    except Exception as e:
                        st.warning(f"JSON nelze naƒç√≠st: {e}")

        except Exception as e:
            st.error(f"Chyba p≈ôi vol√°n√≠ API: {e}")

# ========== ROUTER ==========
if menu == "√övod":
    page_uvod()
elif menu == "Z√°klady":
    page_zaklady()
elif menu == "N√°stroje":
    page_nastroje()
elif menu == "Portfolio":
    page_portfolio()
elif menu == "Mini kv√≠z":
    page_kviz()
elif menu == "Timeline":
    page_timeline()
elif menu == "Zdroje":
    page_zdroje()
elif menu == "üìñ Teorie":
    page_teorie()
elif menu == "üß≠ QA tah√°k":
    page_qatahaky()
elif menu == "üåê API tester":
    page_api_tester()


import json
import streamlit as st
import pandas as pd
import requests
import streamlit.components.v1 as components

# ===================== Z√ÅKLADN√ç NASTAVEN√ç =====================
st.set_page_config(page_title="Jak se st√°t testerem", page_icon="üêû", layout="wide")

# ---- Glob√°ln√≠ CSS: ≈°ir≈°√≠ obsah + men≈°√≠ horn√≠ mezera ----
st.markdown("""
<style>
.block-container {
  max-width: 1600px;
  padding-left: 2rem;
  padding-right: 2rem;
}
main .block-container {
  padding-top: 0.75rem !important;
}
h1 { margin-top: 0 !important; }
</style>
""", unsafe_allow_html=True)

# ---- Sidebar vzhled ----
st.markdown("""
<style>
[data-testid="stSidebar"] h2 {
  font-size: 22px !important;
  font-weight: 700 !important;
  margin: 0 0 10px 0 !important;
}
[data-testid="stSidebar"] [role="radiogroup"] > label { padding: 6px 0 !important; }
[data-testid="stSidebar"] [role="radiogroup"] p { font-size: 16px !important; }
</style>
""", unsafe_allow_html=True)

# ===================== MENU (URL ?page=...) =====================
PAGES = [
    ("√övod", "uvod"),
    ("Z√°klady", "zaklady"),
    ("N√°stroje", "nastroje"),
    ("Portfolio", "portfolio"),
    ("Mini kv√≠z", "mini-kviz"),
    ("Timeline", "timeline"),
    ("Zdroje", "zdroje"),
    ("üìñ Teorie", "teorie"),
    ("üß≠ QA tah√°k", "qa-tahak"),
    ("üåê API tester", "api-tester"),
]
titles = [t for t, _ in PAGES]
slugs  = {t: s for t, s in PAGES}
from_slug = {s: t for t, s in PAGES}

# Sidebar
st.sidebar.markdown("<h2>üìö Navigace</h2>", unsafe_allow_html=True)
menu = st.sidebar.radio("", titles, index=0)

# === BANNER OBR√ÅZEK NAD OBSAHEM ===
st.image(
    "https://i.ibb.co/vZnMZ5X/junior-tester-banner.jpg",
    use_container_width=True
)
# ===================== STR√ÅNKY =====================
def page_uvod():
    col1, col2 = st.columns([1, 2], vertical_alignment="center")
    with col1:
        st.metric("Splnƒõno", f"{progress_pct()} %")
        if st.button("Resetuj postup"):
            for k in st.session_state.done:
                st.session_state.done[k] = False
            st.rerun()
    with col2:
        st.info("Tip: Pou≈æ√≠vej menu vlevo. Ka≈æd√° sekce se zobraz√≠ tady v hlavn√≠ ƒç√°sti.")

def page_zaklady():
    st.header("1) Z√°klady")

    st.session_state.done["manual_vs_auto"] = st.checkbox(
        "Rozd√≠l: manu√°ln√≠ vs. automatizovan√© testov√°n√≠",
        value=st.session_state.done["manual_vs_auto"],
    )
    st.session_state.done["web_basics"] = st.checkbox(
        "Z√°klady webu (HTML/CSS/JS)",
        value=st.session_state.done["web_basics"],
    )
    st.session_state.done["sql"] = st.checkbox(
        "Z√°klady SQL",
        value=st.session_state.done["sql"],
    )
    st.session_state.done["git"] = st.checkbox(
        "Verzov√°n√≠ (Git) a GitHub",
        value=st.session_state.done["git"],
    )
    st.session_state.done["testing_basics"] = st.checkbox(
        "Z√°klady testov√°n√≠ (bug, testcase, regression, smoke)",
        value=st.session_state.done.get("testing_basics", False),
    )
    st.session_state.done["sdlc"] = st.checkbox(
        "≈Ωivotn√≠ cyklus SW (SDLC/STLC)",
        value=st.session_state.done.get("sdlc", False),
    )
    st.session_state.done["agile"] = st.checkbox(
        "Agile / Scrum z√°klady",
        value=st.session_state.done.get("agile", False),
    )
    st.session_state.done["logs"] = st.checkbox(
        "Z√°klady pr√°ce s logy",
        value=st.session_state.done.get("logs", False),
    )
    st.session_state.done["linux"] = st.checkbox(
        "Z√°klady Linux/CLI",
        value=st.session_state.done.get("linux", False),
    )
    st.session_state.done["networks"] = st.checkbox(
        "Z√°klady s√≠t√≠ (HTTP, DNS, IP)",
        value=st.session_state.done.get("networks", False),
    )
    st.session_state.done["static_dynamic"] = st.checkbox(
        "Statick√© vs. dynamick√© testov√°n√≠ ‚Äì ch√°pu rozd√≠l",
        value=st.session_state.done.get("static_dynamic", False),
    )

def page_nastroje():
    st.header("2) N√°stroje a praxe")

    st.subheader("Tracking & spr√°va")
    st.session_state.done["jira"] = st.checkbox(
        "Jira / Trello ‚Äì evidence √∫kol≈Ø a bug≈Ø",
        value=st.session_state.done["jira"],
    )
    st.session_state.done["testrail"] = st.checkbox(
        "TestRail / Zephyr ‚Äì spr√°va test cases",
        value=st.session_state.done.get("testrail", False),
    )
    st.session_state.done["confluence"] = st.checkbox(
        "Confluence / Notion ‚Äì dokumentace",
        value=st.session_state.done.get("confluence", False),
    )

    st.subheader("API testov√°n√≠")
    st.session_state.done["api"] = st.checkbox(
        "Postman ‚Äì tvorba a spou≈°tƒõn√≠ request≈Ø",
        value=st.session_state.done["api"],
    )
    st.session_state.done["insomnia"] = st.checkbox(
        "Insomnia / alternativn√≠ API klient",
        value=st.session_state.done.get("insomnia", False),
    )

    st.subheader("Automatizace")
    st.session_state.done["auto"] = st.checkbox(
        "Automatizace ‚Äì Python + Playwright/pytest",
        value=st.session_state.done["auto"],
    )
    st.session_state.done["selenium"] = st.checkbox(
        "Selenium ‚Äì star≈°√≠ framework pro UI testy",
        value=st.session_state.done.get("selenium", False),
    )
    st.session_state.done["ci_cd"] = st.checkbox(
        "CI/CD (GitHub Actions, Jenkins) ‚Äì spou≈°tƒõn√≠ test≈Ø",
        value=st.session_state.done.get("ci_cd", False),
    )

    st.subheader("Prost≈ôed√≠ & ladƒõn√≠")
    st.session_state.done["devtools"] = st.checkbox(
        "Prohl√≠≈æeƒçov√© DevTools ‚Äì inspekce, network, performance",
        value=st.session_state.done.get("devtools", False),
    )
    st.session_state.done["docker"] = st.checkbox(
        "Docker / VirtualBox ‚Äì testovac√≠ prost≈ôed√≠",
        value=st.session_state.done.get("docker", False),
    )
    st.session_state.done["logs"] = st.checkbox(
        "Pr√°ce s logy a monitoring (Grafana, Kibana)",
        value=st.session_state.done.get("logs", False),
    )

    st.subheader("Komunikace")
    st.session_state.done["slack"] = st.checkbox(
        "Slack / MS Teams ‚Äì t√Ωmov√° komunikace",
        value=st.session_state.done.get("slack", False),
    )

def page_portfolio():
    st.header("3) Portfolio a pr√°ce")

    st.subheader("GitHub projekty")
    st.session_state.done["projects"] = st.checkbox(
        "Miniprojekty na GitHubu (testovac√≠ skripty, uk√°zky)",
        value=st.session_state.done["projects"],
    )
    st.session_state.done["bug_reports"] = st.checkbox(
        "Uk√°zkov√© bug reporty v repozit√°≈ôi",
        value=st.session_state.done.get("bug_reports", False),
    )
    st.session_state.done["testcases_repo"] = st.checkbox(
        "Test cases v repozit√°≈ôi (nap≈ô. XLSX/Markdown)",
        value=st.session_state.done.get("testcases_repo", False),
    )

    st.subheader("Dokumentace & uk√°zky")
    st.session_state.done["readme"] = st.checkbox(
        "README s popisem projekt≈Ø a n√°stroj≈Ø",
        value=st.session_state.done["readme"],
    )
    st.session_state.done["templates"] = st.checkbox(
        "≈†ablony (bug report, test case, checklist)",
        value=st.session_state.done.get("templates", False),
    )

    st.subheader("Prezentace")
    st.session_state.done["cv"] = st.checkbox(
        "CV (zamƒõ≈ôen√© na QA) + LinkedIn profil",
        value=st.session_state.done["cv"],
    )
    st.session_state.done["blog"] = st.checkbox(
        "Sd√≠len√© pozn√°mky / blog o testov√°n√≠",
        value=st.session_state.done.get("blog", False),
    )

    st.divider()
    with st.form("plan"):
        st.subheader("üó∫Ô∏è T√Ωdenn√≠ pl√°n")
        jmeno = st.text_input("Jm√©no (voliteln√©)", "")
        hodin = st.slider("Kolik hodin t√Ωdnƒõ zvl√°dne≈°?", 1, 20, 5)
        fokus = st.selectbox(
            "Hlavn√≠ fokus na t√Ωden",
            ["Z√°klady", "API testov√°n√≠", "Automatizace", "Portfolio/README"],
        )
        submit = st.form_submit_button("Vygenerovat pl√°n")
        if submit:
            body = {
                "Z√°klady": ["‚Ä¢ 2 h Git + GitHub", "‚Ä¢ 2 h HTML/CSS/JS", "‚Ä¢ 1 h SQL"],
                "API testov√°n√≠": ["‚Ä¢ 2 h Postman z√°klady", "‚Ä¢ 2 h psan√≠ request≈Ø", "‚Ä¢ 1 h dokumentace"],
                "Automatizace": ["‚Ä¢ 2 h Python", "‚Ä¢ 2 h Playwright/pytest", "‚Ä¢ 1 h refaktor"],
                "Portfolio/README": ["‚Ä¢ 2 h README + uk√°zky", "‚Ä¢ 2 h miniprojekt", "‚Ä¢ 1 h polishing"],
            }
            st.success((f"{jmeno}, " if jmeno else "") + f"tv≈Øj pl√°n na {hodin} h/t√Ωden:")
            st.write("\n".join(body[fokus]))

def page_kviz():
    st.header("üß© Mini kv√≠z ‚Äì pohovorov√© ot√°zky")
    q1 = st.radio("1) Jak√Ω je rozd√≠l mezi verifikac√≠ a validac√≠?", [
        "Verifikace = proti pot≈ôeb√°m u≈æivatele, Validace = proti specifikaci",
        "Verifikace = proti specifikaci, Validace = proti pot≈ôeb√°m u≈æivatele",
        "≈Ω√°dn√Ω rozd√≠l",
    ], index=None)
    q2 = st.radio("2) Co je regresn√≠ testov√°n√≠?", [
        "Ovƒõ≈ôen√≠, ≈æe opravy a nov√© funkce nerozbily starou funkƒçnost",
        "Testy v√Ωkonu pod z√°tƒõ≈æ√≠",
        "Rychl√© ovƒõ≈ôen√≠, ≈æe konkr√©tn√≠ funkƒçnost funguje",
    ], index=None)
    q3 = st.radio("3) Jak√Ω je rozd√≠l mezi severity a priority?", [
        "Severity = dopad na syst√©m, Priority = kdy opravit",
        "Severity = kdo chybu nahl√°sil, Priority = kolik u≈æivatel≈Ø ji m√°",
        "≈Ω√°dn√Ω rozd√≠l",
    ], index=None)
    if st.button("Vyhodnotit"):
        score = 0
        if q1 == "Verifikace = proti specifikaci, Validace = proti pot≈ôeb√°m u≈æivatele": score += 1
        if q2 == "Ovƒõ≈ôen√≠, ≈æe opravy a nov√© funkce nerozbily starou funkƒçnost": score += 1
        if q3 == "Severity = dopad na syst√©m, Priority = kdy opravit": score += 1
        st.success(f"Sk√≥re: {score}/3")
        if score == 3: st.balloons()

def page_timeline():
    st.header("üóìÔ∏è Doporuƒçen√° timeline")
    timeline = pd.DataFrame({
        "T√Ωden": ["1‚Äì2", "3‚Äì4", "5‚Äì6", "7‚Äì8", "9‚Äì10", "11‚Äì12"],
        "Fokus": [
            "Z√°klady testov√°n√≠ (manu√°l/auto, funkƒçn√≠ vs. nefunkƒçn√≠, bug reporty)",
            "Git + GitHub, z√°klady webu (HTML/CSS/JS), SQL",
            "N√°stroje: Jira, Postman, TestRail",
            "Automatizace: Python, Playwright/pytest, CI/CD",
            "Miniprojekty na GitHubu, README, bug reporty, test cases",
            "P≈ô√≠prava na pohovor, CV + LinkedIn, praktick√© √∫koly",
        ],
    })
    st.table(timeline)
    st.info("‚è±Ô∏è Pl√°n je orientaƒçn√≠ ‚Äì uprav si ho podle mo≈ænost√≠.")

def page_zdroje():
    st.header("üìö U≈æiteƒçn√© zdroje")
    st.markdown("""
### Manu√°ln√≠ testov√°n√≠
- [Practice QA web](https://practice-qa.com)  
- [DemoQA](https://demoqa.com)

### Teorie testov√°n√≠ (ISTQB z√°klady)
- [ISTQB sylabus PDF](https://www.istqb.org/certifications/certified-tester-foundation-level)

### SQL z√°klady
- [SQLZoo](https://sqlzoo.net/)  
- [W3Schools SQL](https://www.w3schools.com/sql/)

### Git a verzov√°n√≠
- [GitHub Learning Lab](https://lab.github.com/)  
- [Pro Git Book](https://git-scm.com/book/en/v2)

### API testov√°n√≠
- [Postman Learning Center](https://learning.postman.com/)  
- [JSONPlaceholder API](https://jsonplaceholder.typicode.com/)

### Automatizace test≈Ø
- [Playwright docs](https://playwright.dev/python/docs/intro)  
- [pytest docs](https://docs.pytest.org/en/stable/)  
- [Selenium docs](https://www.selenium.dev/documentation/)

### CI/CD a DevOps
- [GitHub Actions](https://docs.github.com/en/actions)  
- [Jenkins Pipeline Tutorial](https://www.jenkins.io/doc/pipeline/tour/hello-world/)

### Agile / Scrum
- [Scrum Guide](https://scrumguides.org/)  
- [Atlassian Agile Coach](https://www.atlassian.com/agile)

### N√°stroje
- [Jira Software Guide](https://www.atlassian.com/software/jira/guides)  
- [TestRail intro](https://www.gurock.com/testrail/)  
- [Confluence](https://www.atlassian.com/software/confluence)

### Prohl√≠≈æeƒçov√© DevTools
- [Chrome DevTools Guide](https://developer.chrome.com/docs/devtools/)

### Linux / CLI
- [Linux Journey](https://linuxjourney.com/)  
- [OverTheWire Bandit](https://overthewire.org/wargames/bandit/)

### Networking
- [MDN HTTP Basics](https://developer.mozilla.org/en-US/docs/Web/HTTP)  
- [How DNS works](https://howdns.works/)

### Security z√°klady
- [OWASP Top 10](https://owasp.org/www-project-top-ten/)  
- [PortSwigger Academy](https://portswigger.net/web-security)

### Python & projekty
- [Streamlit docs](https://docs.streamlit.io/)  
- [Awesome Streamlit](https://awesome-streamlit.org/)
""")

def page_teorie():
    st.header("üìñ Z√°kladn√≠ teorie testov√°n√≠")

    st.subheader("Typy test≈Ø")
    st.markdown("""
### Funkƒçn√≠ testy
- **Smoke** ‚Äì z√°kladn√≠ ovƒõ≈ôen√≠, ≈æe aplikace v≈Øbec bƒõ≈æ√≠  
- **Sanity** ‚Äì rychl√© ovƒõ≈ôen√≠, ≈æe konkr√©tn√≠ funkƒçnost funguje po zmƒõnƒõ  
- **Regresn√≠** ‚Äì ovƒõ≈ôen√≠, ≈æe opravy/nov√© funkce nerozbily star√© funkce  
- **Exploratory testing** ‚Äì neform√°ln√≠ testov√°n√≠ bez sc√©n√°≈ôe, hled√°n√≠ neoƒçek√°van√Ωch chyb  
- **Ad-Hoc testing** ‚Äì nahodil√© testov√°n√≠ bez p≈ô√≠pravy, sp√≠≈°e intuitivn√≠  
- **End-to-End testing** ‚Äì ovƒõ≈ôuje cel√Ω proces, nap≈ô. od registrace po n√°kup  

### Nefunkƒçn√≠ testy
- **Performance testy** ‚Äì rychlost odezvy  
- **Load Testing** ‚Äì v√Ωkon p≈ôi z√°tƒõ≈æi  
- **Stress testy** ‚Äì chov√°n√≠ syst√©mu p≈ôi extr√©mn√≠ z√°tƒõ≈æi  
- **Usability testy** ‚Äì u≈æivatelsk√° p≈ô√≠vƒõtivost  
- **Security testy** ‚Äì odolnost v≈Øƒçi √∫tok≈Øm (SQL injection, XSS)  
- **Compatibility testy** ‚Äì funkƒçnost v r≈Øzn√Ωch prohl√≠≈æeƒç√≠ch, za≈ô√≠zen√≠ch, OS  
- **Recovery testy** ‚Äì chov√°n√≠ p≈ôi p√°du syst√©mu a obnova po v√Ωpadku  

### √örovnƒõ testov√°n√≠
- **Jednotkov√© (unit)** ‚Äì testuje jednotliv√© ƒç√°sti k√≥du (metody, funkce, t≈ô√≠dy)  
- **Integraƒçn√≠** ‚Äì testuje propojen√≠ mezi moduly (nap≈ô. Frontend‚ÄìAPI)  
- **Syst√©mov√©** ‚Äì testuje se cel√Ω syst√©m jako celek, funkƒçn√≠ i nefunkƒçn√≠ testy (ovƒõ≈ôen√≠, zda spl≈àuje po≈æadavky)  
- **Akceptaƒçn√≠** ‚Äì prov√°d√≠ klient nebo koncov√Ω u≈æivatel, testuje re√°ln√© sc√©n√°≈ôe pou≈æit√≠, c√≠lem je potvrdit, ≈æe je aplikace p≈ôipraven√° k nasazen√≠  
""")

    st.subheader("Verifikace vs. Validace")
    st.markdown("""
- **Verifikace** = Ovƒõ≈ôuji, zda produkt odpov√≠d√° specifikaci (*Stav√≠me spr√°vnƒõ?*).  
- **Validace** = Ovƒõ≈ôuji, zda produkt spl≈àuje pot≈ôeby u≈æivatele (*Stav√≠me spr√°vnou vƒõc?*).
""")

    st.subheader("Severita vs. Priorita")
    st.markdown("""
### üîπ Severita (Severity)
Ud√°v√° **z√°va≈ænost chyby z technick√©ho pohledu** ‚Äì jak moc chyba ovliv≈àuje funkƒçnost syst√©mu.  
Obvykle ji urƒçuje **tester/QA**.

**√örovnƒõ:**
- üü• **Critical / Blocker** ‚Äì aplikace je nepou≈æiteln√° (nap≈ô. nelze se p≈ôihl√°sit, platby nefunguj√≠)  
- üüß **High / Major** ‚Äì z√°sadn√≠ chyba, ale syst√©m se d√° ƒç√°steƒçnƒõ pou≈æ√≠vat  
- üü® **Medium** ‚Äì omezuje urƒçitou funkƒçnost, existuje workaround  
- üü© **Low / Minor** ‚Äì drobnost bez dopadu na hlavn√≠ funkƒçnost (nap≈ô. p≈ôeklep)  

---

### üîπ Priorita (Priority)
Ud√°v√° **po≈ôad√≠, v jak√©m m√° b√Ωt chyba opravena** ‚Äì jak rychle se m√° ≈ôe≈°it.  
Obvykle ji urƒçuje **Product Owner / Project Manager**.

**√örovnƒõ:**
- üî¥ **High** ‚Äì mus√≠ b√Ωt opraveno okam≈æitƒõ (nap≈ô. kritick√Ω bug na produkci)  
- üü† **Medium** ‚Äì opravit p≈ôed vyd√°n√≠m, ale nen√≠ blocker  
- üü¢ **Low** ‚Äì m≈Ø≈æe poƒçkat, nebr√°n√≠ release (nap≈ô. kosmetick√° √∫prava)  

---

### üîπ Rozd√≠l v praxi
- **Severita = dopad na syst√©m**  
- **Priorita = kdy to oprav√≠me (business pohled)**  

**P≈ô√≠klady:**
- ‚úÖ P≈ôeklep v n√°zvu aplikace: Severita Low, Priorita High  
- ‚úÖ Platba kartou nefunguje: Severita Critical, Priorita High  
- ‚úÖ Tlaƒç√≠tko pad√° jen v Edge: Severita Medium, Priorita Low  
""")

    st.subheader("Bug vs. Defect vs. Failure")
    st.markdown("""
- **Bug** = chyba nalezen√° p≈ôi testov√°n√≠.  
- **Defect** = nesoulad se specifikac√≠ (vƒõt≈°inou v k√≥du).  
- **Failure** = projev chyby v bƒõ≈æ√≠c√≠m syst√©mu.
""")

    st.subheader("API z√°klady")
    st.markdown("""
- **API** = rozhran√≠ pro komunikaci mezi syst√©my.  
- **HTTP metody**: GET, POST, PUT, PATCH, DELETE  
- **Status k√≥dy**: 200 OK, 201 Created, 204 No Content, 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 500 Server Error  
- **REST + JSON** (lehk√©, bƒõ≈æn√©), **SOAP + XML** (form√°lnƒõj≈°√≠, ƒçasto enterprise).
""")

    st.subheader("Metody testov√°n√≠ (Black/White/Gray box)")
    st.markdown("""
- **Blackbox** = testuji vstupy/v√Ωstupy, ne≈ôe≈°√≠m k√≥d.  
- **Whitebox** = zn√°m vnit≈ôn√≠ strukturu k√≥du.  
- **Graybox** = nƒõco z obou (nap≈ô. zn√°≈° sch√©mata DB, logiku).
""")

    st.subheader("SQL ‚Äì z√°klady")
    st.markdown("""
- **DDL**: `CREATE`, `ALTER`, `DROP`  
- **DML**: `INSERT`, `UPDATE`, `DELETE`  
- **DQL**: `SELECT`  
- **DCL**: `GRANT`, `REVOKE`  
- **JOIN**: `INNER`, `LEFT`, `RIGHT`  
- **Prim√°rn√≠ kl√≠ƒç** = jednoznaƒçn√Ω identifik√°tor z√°znamu  
- **Ciz√≠ kl√≠ƒç** = odkaz na prim√°rn√≠ kl√≠ƒç jin√© tabulky
""")

    st.subheader("Logy ‚Äì typy")
    st.markdown("""
- **Application log** (chyby v aplikaci)  
- **System log** (OS, slu≈æby)  
- **Security log** (p≈ôihl√°≈°en√≠, audit)
""")

    st.subheader("BDD ‚Äì Behavior Driven Development")
    st.markdown("""
**Given** (p≈ôedpoklad) ‚Äì **When** (akce) ‚Äì **Then** (v√Ωsledek)

P≈ô√≠klad:  
*Given u≈æivatel je p≈ôihl√°≈°en*  
*When klikne na ‚ÄûOdhl√°sit‚Äú*  
*Then syst√©m ho odhl√°s√≠ a p≈ôesmƒõruje na login str√°nku*.
""")

def page_qatahaky():
    st.header("üß≠ QA tah√°k (proces + ≈°ablony)")
    st.markdown("Rychl√© tah√°ky pro praxi testera. St√°hni si ≈°ablony a pou≈æ√≠vej ve sv√Ωch projektech.")

    st.markdown("### 1) P≈ô√≠prava")
    st.write("- **C√≠l & rozsah**, **Rizika/priorita**, **Prost≈ôed√≠ & data**, **DoD**")

    st.markdown("### 2) N√°vrh test≈Ø")
    st.write("""
- Techniky: ekvivalence, hranice, stavov√© p≈ôechody, pairwise  
- √örovnƒõ: unit/API/UI; typy: funkƒçn√≠, negativn√≠, regresn√≠, smoke  
- Minimal viable set: nejd≈ô√≠v **smoke**, pak kritick√© cesty, pak okraje  
""")

    st.markdown("### 3) Proveden√≠")
    st.write("""
- Scripted + Exploratory ~ 70/30 (timebox 30‚Äì60 min)  
- Evidence: PASS/FAIL, screenshot/log/HAR u fail≈Ø  
- Verzov√°n√≠: dr≈æ v Gitu (README, `tests/`, `testcases.xlsx`)  
""")

    st.markdown("### 4) Bug report ‚Äì ≈°ablona")
    bug = """N√°zev: [Checkout] 500 p≈ôi pr√°zdn√©m ko≈°√≠ku
Prost≈ôed√≠: test, v1.2.3 (build #456), Chrome 127
Kroky: 1) Otev≈ô√≠t /checkout  2) Kliknout ‚ÄûZaplatit‚Äú s pr√°zdn√Ωm ko≈°√≠kem
Oƒçek√°van√©: Validace ‚ÄûKo≈°√≠k je pr√°zdn√Ω‚Äú
Aktu√°ln√≠: HTTP 500, b√≠l√° str√°nka
D≈Økazy: screenshot.png, network.har
Z√°va≈ænost/Priorita: High / P1
Pozn√°mka: Regrese od v1.2.2
Status: NEW
"""
    st.code(bug, language="markdown")
    st.download_button("‚¨áÔ∏è St√°hnout Bug report", bug, file_name="bug-report.md")

    st.markdown("### 5) Test case ‚Äì ≈°ablona")
    tc = """ID: TC-LOGIN-001
N√°zev: P≈ôihl√°≈°en√≠ validn√≠ho u≈æivatele
C√≠l: Ovƒõ≈ôit, ≈æe u≈æivatel s platn√Ωmi √∫daji se √∫spƒõ≈°nƒõ p≈ôihl√°s√≠
Prost≈ôed√≠: test, v1.2.3 (build #456), Chrome 127
Po≈æadavky/Trace: REQ-LOGIN-001
P≈ôedpoklady / Data: user@test.com / *****

Kroky:
  1) Otev≈ô√≠t /login
  2) Vyplnit platn√© √∫daje
  3) Odeslat formul√°≈ô

Oƒçek√°van√Ω v√Ωsledek:
  - U≈æivatel je p≈ôesmƒõrov√°n na /dashboard
  - Zobraz√≠ se u≈æivatelsk√© jm√©no v headeru

Aktu√°ln√≠ v√Ωsledek:
  - [doplnit po proveden√≠ testu]

Status: NOT RUN / PASS / FAIL / BLOCKED
Priorita: P1
Tagy: @smoke @regression
Evidence: screenshot.png, log.txt, network.har
Pozn√°mky:
"""
    st.code(tc, language="markdown")
    st.download_button("‚¨áÔ∏è St√°hnout Test Case", tc, file_name="test-case.md")

    st.markdown("### 6) PR checklist")
    pr = """PR checklist:
- [ ] Projde lok√°ln√≠ smoke
- [ ] Test data/seed aktualizov√°ny
- [ ] P≈ôidan√©/zmƒõnƒõn√© testy
- [ ] Bezpeƒçnostn√≠ dopad zhodnocen
- [ ] Aktualizov√°n README/CHANGELOG
"""
    st.code(pr, language="markdown")
    st.download_button("‚¨áÔ∏è St√°hnout PR checklist", pr, file_name="pr-checklist.md")

    with st.expander("Legenda status≈Ø pro test case"):
        st.markdown("""
- **NOT RUN** ‚Äì test zat√≠m neprobƒõhl  
- **PASS** ‚Äì oƒçek√°van√© = aktu√°ln√≠  
- **FAIL** ‚Äì odchylka od oƒçek√°van√©ho v√Ωsledku  
- **BLOCKED** ‚Äì test nelze prov√©st (z√°vislost, prost≈ôed√≠, blocker bug)
""")

def page_api_tester():
    st.header("üåê API dokumentace + rychl√Ω tester")
    with st.expander("üìñ Dokumentace (demo: JSONPlaceholder)"):
        st.markdown("""
**Todos API**
- `GET /todos/1` ‚Üí detail jednoho √∫kolu  
- `GET /todos`   ‚Üí seznam √∫kol≈Ø  
- `POST /todos`  ‚Üí vytvo≈ô√≠ nov√Ω √∫kol (JSON body)

**Users API**
- `GET /users/1` ‚Üí detail u≈æivatele  
- `GET /users`   ‚Üí seznam u≈æivatel≈Ø

Z√°kladn√≠ URL: `https://jsonplaceholder.typicode.com`
""")

    colA, colB = st.columns([3, 1])
    with colA:
        url = st.text_input("URL endpointu", "https://jsonplaceholder.typicode.com/todos/1")
    with colB:
        metoda = st.selectbox("Metoda", ["GET", "POST", "PUT", "PATCH", "DELETE"])

    headers_text = st.text_area("HTTP headers (Kl√≠ƒç: Hodnota na ≈ô√°dek)", "Content-Type: application/json", height=80)
    body_text = st.text_area("Request JSON body (pro POST/PUT/PATCH)", '{\n  "title": "Test √∫kol",\n  "completed": false\n}', height=140)

    exp_col1, exp_col2 = st.columns(2)
    with exp_col1:
        expected_status = st.number_input("Oƒçek√°van√Ω status k√≥d", value=200, step=1)
    with exp_col2:
        validate_json = st.checkbox("Validovat JSON odpovƒõƒè", value=False)

    def parse_headers(text: str) -> dict:
        headers = {}
        for line in text.splitlines():
            if not line.strip() or ":" not in line:
                continue
            k, v = line.split(":", 1)
            headers[k.strip()] = v.strip()
        return headers

    def parse_json_or_none(text: str):
        try:
            return json.loads(text)
        except Exception:
            return None

    if st.button("Spustit dotaz"):
        headers = parse_headers(headers_text)
        json_body = parse_json_or_none(body_text)

        try:
            if metoda == "GET":
                r = requests.get(url, headers=headers, timeout=10)
            elif metoda == "POST":
                r = requests.post(url, headers=headers, json=json_body, timeout=10)
            elif metoda == "PUT":
                r = requests.put(url, headers=headers, json=json_body, timeout=10)
            elif metoda == "PATCH":
                r = requests.patch(url, headers=headers, json=json_body, timeout=10)
            elif metoda == "DELETE":
                r = requests.delete(url, headers=headers, timeout=10)
            else:
                r = None
                st.error("Nezn√°m√° metoda.")

            if r is not None:
                st.write("**Status k√≥d:**", r.status_code)
                if r.headers.get("Content-Type", "").startswith("application/json"):
                    try: st.json(r.json())
                    except Exception: st.text(r.text[:2000])
                else:
                    st.text(r.text[:2000])

                if r.status_code == int(expected_status):
                    st.success(f"PASS ‚Äì status {r.status_code} = oƒçek√°van√Ω {expected_status}")
                else:
                    st.error(f"FAIL ‚Äì status {r.status_code} ‚â† oƒçek√°van√Ω {expected_status}")

                if validate_json:
                    try:
                        _ = r.json()
                        st.info("JSON odpovƒõƒè vypad√° validnƒõ ‚úÖ")
                    except Exception as e:
                        st.warning(f"JSON nelze naƒç√≠st: {e}")
        except Exception as e:
            st.error(f"Chyba p≈ôi vol√°n√≠ API: {e}")

# ===================== ROUTER =====================
if menu == "√övod":
    page_uvod()
elif menu == "Z√°klady":
    page_zaklady()
elif menu == "N√°stroje":
    page_nastroje()
elif menu == "Portfolio":
    page_portfolio()
elif menu == "Mini kv√≠z":
    page_kviz()
elif menu == "Timeline":
    page_timeline()
elif menu == "Zdroje":
    page_zdroje()
elif menu == "üìñ Teorie":
    page_teorie()
elif menu == "üß≠ QA tah√°k":
    page_qatahaky()
elif menu == "üåê API tester":
    page_api_tester()



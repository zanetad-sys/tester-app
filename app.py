import json
import streamlit as st
import pandas as pd
import requests

st.set_page_config(page_title="Jak se st√°t testerem", page_icon="‚úÖ", layout="wide")

# ========== STAV (checkboxy) ==========
if "done" not in st.session_state:
    st.session_state.done = {
        "manual_vs_auto": False,
        "web_basics": False,
        "sql": False,
        "git": False,
        "jira": False,
        "testcases": False,
        "api": False,
        "auto": False,
        "projects": False,
        "readme": False,
        "cv": False,
    }

def percent():
    d = st.session_state.done
    return int(100 * sum(d.values()) / len(d)) if d else 0

# ========== MENU V SIDEBARU ==========
menu = st.sidebar.radio(
    "üìö Navigace",
    [
        "√övod",
        "Z√°klady",
        "N√°stroje",
        "Portfolio",
        "Mini kv√≠z",
        "Timeline",
        "Zdroje",
        "üìñ Teorie",
        "üß≠ QA tah√°k",
        "üåê API tester",
    ],
    index=0,
)

# ========== STR√ÅNKY ==========
def page_uvod():
    st.title("Jak se st√°t testerem ‚Äì mini pr≈Øvodce")
    st.write("Postupnƒõ a v klidu. Z√°klady a praxe. Za≈°krt√°vej splnƒõn√© kroky a sleduj postup.")
    col1, col2 = st.columns([1, 2], vertical_alignment="center")
    with col1:
        st.metric("Splnƒõno", f"{percent()} %")
        if st.button("Resetuj postup"):
            for k in st.session_state.done:
                st.session_state.done[k] = False
            st.rerun()
    with col2:
        st.info("Tip: Pou≈æ√≠vej menu vlevo. Ka≈æd√° sekce se zobraz√≠ tady v hlavn√≠ ƒç√°sti.")

def page_zaklady():
    st.header("1) Z√°klady QA ‚Äì kompletn√≠ p≈ôehled")

    # ============ BLOK 1: Co je QA =============
    st.subheader("üéØ Co je QA a role testera")
    st.session_state.done["qa_definition"] = st.checkbox(
        "Co je testov√°n√≠ / QA",
        value=st.session_state.done.get("qa_definition", False),
    )
    st.session_state.done["qa_roles"] = st.checkbox(
        "Role: tester vs. v√Ωvoj√°≈ô vs. produkt√°k",
        value=st.session_state.done.get("qa_roles", False),
    )
    st.session_state.done["qa_sdlc"] = st.checkbox(
        "≈Ωivotn√≠ cyklus v√Ωvoje softwaru (SDLC, agiln√≠, waterfall)",
        value=st.session_state.done.get("qa_sdlc", False),
    )
    st.session_state.done["qa_types"] = st.checkbox(
        "Typy test≈Ø ‚Äì √∫rovnƒõ (unit, integraƒçn√≠, syst√©mov√©, akceptaƒçn√≠)",
        value=st.session_state.done.get("qa_types", False),
    )
    st.session_state.done["qa_vv"] = st.checkbox(
        "Rozd√≠l mezi verifikac√≠ a validac√≠",
        value=st.session_state.done.get("qa_vv", False),
    )
    st.session_state.done["qa_sevpri"] = st.checkbox(
        "Severita vs. priorita bug≈Ø",
        value=st.session_state.done.get("qa_sevpri", False),
    )

    with st.expander("üìñ Vysvƒõtlivky ‚Äì QA z√°klady"):
        st.markdown("""
- **QA** = zaji≈°tƒõn√≠ kvality (procesy + testov√°n√≠).  
- **Role testera** = hled√° chyby, p≈ôem√Ω≈°l√≠ za u≈æivatele, zaji≈°≈•uje, ≈æe produkt odpov√≠d√° po≈æadavk≈Øm.  
- **SDLC** = waterfall (f√°ze po sobƒõ) vs. agile (Scrum, iterace).  
- **Verifikace** = dƒõl√°me vƒõci spr√°vnƒõ, **Validace** = dƒõl√°me spr√°vn√© vƒõci.  
- **Severita** = dopad chyby, **Priorita** = jak rychle ji opravit.
""")

    st.divider()

    # ============ BLOK 2: Technick√© minimum ============
    st.subheader("üñ•Ô∏è Technick√© minimum")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.session_state.done["tech_web"] = st.checkbox(
            "Web (HTML, CSS, JS)", value=st.session_state.done.get("tech_web", False)
        )
        st.session_state.done["tech_sql"] = st.checkbox(
            "Datab√°ze + SQL", value=st.session_state.done.get("tech_sql", False)
        )
    with col2:
        st.session_state.done["tech_git"] = st.checkbox(
            "Git/GitHub", value=st.session_state.done.get("tech_git", False)
        )
        st.session_state.done["tech_logs"] = st.checkbox(
            "Logy (application/system/security)",
            value=st.session_state.done.get("tech_logs", False),
        )
    with col3:
        st.session_state.done["tech_http"] = st.checkbox(
            "HTTP/HTTPS z√°klady", value=st.session_state.done.get("tech_http", False)
        )
        st.session_state.done["tech_api"] = st.checkbox(
            "API (REST/JSON, SOAP/XML)",
            value=st.session_state.done.get("tech_api", False),
        )

    with st.expander("üìñ Vysvƒõtlivky ‚Äì Technick√© minimum"):
        st.markdown("""
- **Web** = HTML struktura, CSS styly, JS logika.  
- **SQL** = SELECT, JOIN, INSERT, UPDATE, kl√≠ƒçe.  
- **Git** = commit, push, pull request.  
- **Logy** = application (chyby appky), system (OS, slu≈æby), security (p≈ôihl√°≈°en√≠).  
- **HTTP** = request/response, status k√≥dy (200, 404, 500).  
- **API** = REST (JSON, lehk√©), SOAP (XML, enterprise).
""")

    st.divider()

    # ============ BLOK 3: Praktick√© n√°stroje ============
    st.subheader("üõ†Ô∏è Praktick√© n√°stroje")
    st.session_state.done["tools_bugtracking"] = st.checkbox(
        "Bug tracking (Jira, Trello, Bugzilla)",
        value=st.session_state.done.get("tools_bugtracking", False),
    )
    st.session_state.done["tools_testmgmt"] = st.checkbox(
        "Test management (TestRail, Xray, Excel ≈°ablony)",
        value=st.session_state.done.get("tools_testmgmt", False),
    )
    st.session_state.done["tools_postman"] = st.checkbox(
        "Postman (API testing) / SOAP UI",
        value=st.session_state.done.get("tools_postman", False),
    )
    st.session_state.done["tools_devtools"] = st.checkbox(
        "DevTools v prohl√≠≈æeƒçi (network, console, cookies)",
        value=st.session_state.done.get("tools_devtools", False),
    )

    with st.expander("üìñ Vysvƒõtlivky ‚Äì Praktick√© n√°stroje"):
        st.markdown("""
- **Jira/Trello** = evidence √∫kol≈Ø a bug≈Ø.  
- **TestRail/Xray/Excel** = spr√°va test≈Ø a v√Ωsledk≈Ø.  
- **Postman/SOAP UI** = testov√°n√≠ API.  
- **DevTools** = prohl√≠≈æen√≠ s√≠≈•ov√Ωch po≈æadavk≈Ø, log≈Ø a cookies.
""")

    st.divider()

    # ============ BLOK 4: Automatizace + Bonus ============
    st.subheader("ü§ñ Automatizace + Bonus")
    st.session_state.done["auto_python"] = st.checkbox(
        "Z√°klady Pythonu/jin√©ho jazyka",
        value=st.session_state.done.get("auto_python", False),
    )
    st.session_state.done["auto_framework"] = st.checkbox(
        "Framework (pytest, Playwright, Selenium)",
        value=st.session_state.done.get("auto_framework", False),
    )
    st.session_state.done["auto_ci"] = st.checkbox(
        "Principy CI/CD (GitHub Actions, GitLab CI)",
        value=st.session_state.done.get("auto_ci", False),
    )
    st.session_state.done["bonus_security"] = st.checkbox(
        "Z√°klady bezpeƒçnostn√≠ho testov√°n√≠ (XSS, SQLi)",
        value=st.session_state.done.get("bonus_security", False),
    )
    st.session_state.done["bonus_performance"] = st.checkbox(
        "Performance testy (JMeter, k6 ‚Äì teorie)",
        value=st.session_state.done.get("bonus_performance", False),
    )
    st.session_state.done["bonus_cloud"] = st.checkbox(
        "Cloud/prost≈ôed√≠ (docker, staging vs. prod)",
        value=st.session_state.done.get("bonus_cloud", False),
    )
    st.session_state.done["bonus_linux"] = st.checkbox(
        "Z√°klady Linux shellu (navigace, grep, logy)",
        value=st.session_state.done.get("bonus_linux", False),
    )

    with st.expander("üìñ Vysvƒõtlivky ‚Äì Automatizace a Bonus"):
        st.markdown("""
- **Python/Java** = z√°kladn√≠ syntaxe, funkce, testovac√≠ skripty.  
- **Pytest/Playwright/Selenium** = frameworky pro automatizaci.  
- **CI/CD** = kontinu√°ln√≠ integrace a nasazov√°n√≠ (nap≈ô. GitHub Actions).  
- **Security** = z√°kladn√≠ √∫toky jako XSS, SQLi na demo aplikac√≠ch.  
- **Performance** = JMeter, k6 pro z√°tƒõ≈æov√© testy.  
- **Cloud** = docker, prost≈ôed√≠ dev/stage/prod.  
- **Linux** = pr√°ce v shellu, logy, grep.
""")

    # Checklist download
    all_items = [k for k, v in st.session_state.done.items() if k.startswith(("qa_", "tech_", "tools_", "auto_", "bonus_"))]
    checklist = "\n".join(f"- {k}" for k in all_items)
    st.download_button("‚¨áÔ∏è St√°hnout checklist v≈°ech z√°klad≈Ø", checklist, "qa-zaklady-checklist.txt")
# ---------- Inicializace kl√≠ƒç≈Ø pro str√°nku "N√°stroje" ----------
_tools_keys = [
    "tools_jira", "tools_testmgmt",
    "tools_postman", "tools_soapui", "tools_curl",
    "tools_git",
    "tools_python", "tools_playwright", "tools_selenium", "tools_pytest", "tools_selide",
    "tools_devtools", "tools_logs",
    "tools_cicd",
    "tools_db_clients",
    "tools_docker", "tools_ide", "tools_perf",
]
for _k in _tools_keys:
    st.session_state.done.setdefault(_k, False)

def page_nastroje():
    st.header("2) N√°stroje ‚Äì co by mƒõl tester zn√°t")

    # ============== ORGANIZACE & BUG TRACKING ==============
    st.subheader("üìÇ Organizace & bug tracking")
    c1, c2 = st.columns(2)
    with c1:
        st.session_state.done["tools_jira"] = st.checkbox(
            "Jira / Trello / Asana / Bugzilla ‚Äì evidence √∫kol≈Ø a bug≈Ø",
            value=st.session_state.done.get("tools_jira", False)
        )
    with c2:
        st.session_state.done["tools_testmgmt"] = st.checkbox(
            "Test management: TestRail / Xray / Zephyr / Azure DevOps / Excel/Sheets",
            value=st.session_state.done.get("tools_testmgmt", False)
        )
    with st.expander("üéì Tipy ‚Äì workflow & reporty"):
        st.markdown("""
- **Workflow:** To Do ‚Üí In Progress ‚Üí In Review ‚Üí Done  
- **Bug report:** n√°zev, prost≈ôed√≠, kroky, oƒçek√°van√© vs. aktu√°ln√≠, d≈Økazy, **Sev/Pri**  
- **Vazby:** ticket ‚ÜîÔ∏è PR/MR ‚ÜîÔ∏è test cases ‚ÜîÔ∏è release notes
""")

    st.divider()

    # ============== API & KOMUNIKACE ==============
    st.subheader("üåê API & komunikace")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.session_state.done["tools_postman"] = st.checkbox(
            "Postman ‚Äì kolekce, environmenty, test scripts",
            value=st.session_state.done.get("tools_postman", False)
        )
    with c2:
        st.session_state.done["tools_soapui"] = st.checkbox(
            "SOAP UI ‚Äì testov√°n√≠ SOAP (XML) slu≈æeb",
            value=st.session_state.done.get("tools_soapui", False)
        )
    with c3:
        st.session_state.done["tools_curl"] = st.checkbox(
            "curl ‚Äì rychl√© vol√°n√≠ API v termin√°lu",
            value=st.session_state.done.get("tools_curl", False)
        )
    with st.expander("üéì Tah√°k ‚Äì HTTP & API"):
        st.code("""# GET
curl -i https://jsonplaceholder.typicode.com/todos/1

# POST (JSON body)
curl -i -X POST https://httpbin.org/post \
  -H "Content-Type: application/json" \
  -d '{"title":"Test","completed":false}'
""", language="bash")

    st.divider()

    # ============== VERZOV√ÅN√ç ==============
    st.subheader("üîÅ Verzov√°n√≠")
    st.session_state.done["tools_git"] = st.checkbox(
        "Git + GitHub/GitLab/Bitbucket (commity, PR/MR, code review)",
        value=st.session_state.done.get("tools_git", False)
    )
    with st.expander("üéì Tah√°k ‚Äì Git"):
        st.code("""git checkout -b feat/x
git add .
git commit -m "feat: x"
git push -u origin feat/x
# otev≈ôi PR/MR ‚Üí review ‚Üí merge
""", language="bash")

    st.divider()

    # ============== AUTOMATIZACE TEST≈Æ ==============
    st.subheader("ü§ñ Automatizace test≈Ø")
    c1, c2, c3, c4 = st.columns(4)
    with c1:
        st.session_state.done["tools_python"] = st.checkbox(
            "Python / Java/JS (dle firmy)",
            value=st.session_state.done.get("tools_python", False)
        )
    with c2:
        st.session_state.done["tools_playwright"] = st.checkbox(
            "Playwright (UI testy)",
            value=st.session_state.done.get("tools_playwright", False)
        )
    with c3:
        st.session_state.done["tools_selenium"] = st.checkbox(
            "Selenium (UI testy)",
            value=st.session_state.done.get("tools_selenium", False)
        )
    with c4:
        st.session_state.done["tools_pytest"] = st.checkbox(
            "pytest (spou≈°tƒõn√≠, fixtures, reporty)",
            value=st.session_state.done.get("tools_pytest", False)
        )
    st.session_state.done["tools_selide"] = st.checkbox(
        "Selenium IDE? (klikac√≠ z√°znam ‚Äì sp√≠≈° na rychl√© prototypy)",
        value=st.session_state.done.get("tools_selide", False)
    )

    st.divider()

    # ============== DEVTOOLS & LOGY ==============
    st.subheader("üß∞ DevTools & logy")
    c1, c2 = st.columns(2)
    with c1:
        st.session_state.done["tools_devtools"] = st.checkbox(
            "Chrome/Edge DevTools (Network, Console, Storage, Cookies)",
            value=st.session_state.done.get("tools_devtools", False)
        )
    with c2:
        st.session_state.done["tools_logs"] = st.checkbox(
            "Logy: application/system/security (nap≈ô. logcat, journald, server logy)",
            value=st.session_state.done.get("tools_logs", False)
        )
    with st.expander("üéì K ƒçemu logy?"):
        st.markdown("""
- **Application**: stack trace, chybov√© hl√°≈°ky, custom logy  
- **System/journald**: slu≈æby, pamƒõ≈•, s√≠≈•  
- **Security**: p≈ôihl√°≈°en√≠, 403/401, audit
""")

    st.divider()

    # ============== CI/CD ==============
    st.subheader("‚öôÔ∏è CI/CD")
    st.session_state.done["tools_cicd"] = st.checkbox(
        "GitHub Actions / GitLab CI ‚Äì spou≈°tƒõt testy po commitu",
        value=st.session_state.done.get("tools_cicd", False)
    )
    with st.expander("üéì P≈ô√≠klad (GitHub Actions ‚Äì pytest)"):
        st.code("""# .github/workflows/tests.yml
name: tests
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - run: pip install -r requirements.txt
      - run: pytest -q
""", language="yaml")

    st.divider()

    # ============== DATAB√ÅZE ==============
    st.subheader("üóÑÔ∏è Datab√°ze")
    st.session_state.done["tools_db_clients"] = st.checkbox(
        "DBeaver / pgAdmin / MySQL Workbench (GUI pro SQL)",
        value=st.session_state.done.get("tools_db_clients", False)
    )
    with st.expander("üéì Jak do toho zapad√° MySQL, MS SQL, Oracle, PHP?"):
        st.markdown("""
- **MySQL, PostgreSQL, MS SQL, Oracle** = **S≈òBD** (datab√°zov√© servery).  
- **DBeaver/pgAdmin/MySQL Workbench** = **GUI klienti** pro pr√°ci s tƒõmito DB.  
- **SQL** je jazyk dotaz≈Ø (SELECT/INSERT/UPDATE/DELETE, JOINy).  
- **PHP** je **programovac√≠ jazyk** pro backend ‚Äì p≈ôes SQL driver se p≈ôipoj√≠ k DB (stejnƒõ jako Python/Java/JS).
""")

    st.divider()

    # ============== DOPL≈áKOV√â ==============
    st.subheader("üß© Dopl≈àkov√©")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.session_state.done["tools_docker"] = st.checkbox(
            "Docker ‚Äì lok√°ln√≠ dev/test prost≈ôed√≠",
            value=st.session_state.done.get("tools_docker", False)
        )
    with c2:
        st.session_state.done["tools_ide"] = st.checkbox(
            "IDE: VS Code / PyCharm (debugging, linting)",
            value=st.session_state.done.get("tools_ide", False)
        )
    with c3:
        st.session_state.done["tools_perf"] = st.checkbox(
            "V√Ωkonnostn√≠ testy: JMeter / k6 (aspo≈à z√°klady)",
            value=st.session_state.done.get("tools_perf", False)
        )

    st.divider()

    # ============== Export checklistu ==============
    chosen = [
        k for k, v in st.session_state.done.items()
        if k.startswith("tools_") and v
    ]
    text = "N√°stroje ‚Äì splnƒõno:\n" + "\n".join(f"- {x}" for x in chosen) if chosen else "Zat√≠m nic neza≈°krtnuto."
    st.download_button("‚¨áÔ∏è St√°hnout checklist n√°stroj≈Ø (TXT)", text, "nastroje-checklist.txt")


    st.divider()

    # ============== API & KOMUNIKACE ==============
    st.subheader("üåê API & komunikace")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.session_state.done["tools_postman"] = st.checkbox(
            "Postman ‚Äì kolekce, environmenty, test scripts",
            value=st.session_state.done["tools_postman"]
        )
    with c2:
        st.session_state.done["tools_soapui"] = st.checkbox(
            "SOAP UI ‚Äì testov√°n√≠ SOAP (XML) slu≈æeb",
            value=st.session_state.done["tools_soapui"]
        )
    with c3:
        st.session_state.done["tools_curl"] = st.checkbox(
            "curl ‚Äì rychl√© vol√°n√≠ API v termin√°lu",
            value=st.session_state.done["tools_curl"]
        )
    with st.expander("üéì Tah√°k ‚Äì HTTP & API"):
        st.code("""# GET
curl -i https://jsonplaceholder.typicode.com/todos/1

# POST (JSON body)
curl -i -X POST https://httpbin.org/post \
  -H "Content-Type: application/json" \
  -d '{"title":"Test","completed":false}'
""", language="bash")

    st.divider()

    # ============== VERZOV√ÅN√ç ==============
    st.subheader("üîÅ Verzov√°n√≠")
    st.session_state.done["tools_git"] = st.checkbox(
        "Git + GitHub/GitLab/Bitbucket (commity, PR/MR, code review)",
        value=st.session_state.done["tools_git"]
    )
    with st.expander("üéì Tah√°k ‚Äì Git"):
        st.code("""git checkout -b feat/x
git add .
git commit -m "feat: x"
git push -u origin feat/x
# otev≈ôi PR/MR ‚Üí review ‚Üí merge
""", language="bash")

    st.divider()

    # ============== AUTOMATIZACE TEST≈Æ ==============
    st.subheader("ü§ñ Automatizace test≈Ø")
    c1, c2, c3, c4 = st.columns(4)
    with c1:
        st.session_state.done["tools_python"] = st.checkbox(
            "Python / (Java/JS dle firmy)",
            value=st.session_state.done["tools_python"]
        )
    with c2:
        st.session_state.done["tools_playwright"] = st.checkbox(
            "Playwright (UI testy)",
            value=st.session_state.done["tools_playwright"]
        )
    with c3:
        st.session_state.done["tools_selenium"] = st.checkbox(
            "Selenium (UI testy)",
            value=st.session_state.done["tools_selenium"]
        )
    with c4:
        st.session_state.done["tools_pytest"] = st.checkbox(
            "pytest (spou≈°tƒõn√≠, fixtures, reporty)",
            value=st.session_state.done["tools_pytest"]
        )
    st.session_state.done["tools_selide"] = st.checkbox(
        "Selenium IDE? (z√°kladn√≠ klikac√≠ z√°znam ‚Äì sp√≠≈° na rychl√© prototypy)",
        value=st.session_state.done["tools_selide"]
    )

    st.divider()

    # ============== DEVTOOLS & LOGY ==============
    st.subheader("üß∞ DevTools & logy")
    c1, c2 = st.columns(2)
    with c1:
        st.session_state.done["tools_devtools"] = st.checkbox(
            "Chrome/Edge DevTools (Network, Console, Storage, Cookies)",
            value=st.session_state.done["tools_devtools"]
        )
    with c2:
        st.session_state.done["tools_logs"] = st.checkbox(
            "Logy: application/system/security (nap≈ô. logcat, journald, server logy)",
            value=st.session_state.done["tools_logs"]
        )
    with st.expander("üéì K ƒçemu logy?"):
        st.markdown("""
- **Application**: stack trace, chybov√© hl√°≈°ky, custom logy  
- **System/journald**: slu≈æby, pamƒõ≈•, s√≠≈•  
- **Security**: p≈ôihl√°≈°en√≠, 403/401, audit
""")

    st.divider()

    # ============== CI/CD ==============
    st.subheader("‚öôÔ∏è CI/CD")
    st.session_state.done["tools_cicd"] = st.checkbox(
        "GitHub Actions / GitLab CI ‚Äì spou≈°tƒõt testy po commitu",
        value=st.session_state.done["tools_cicd"]
    )
    with st.expander("üéì P≈ô√≠klad (GitHub Actions ‚Äì pytest)"):
        st.code("""# .github/workflows/tests.yml
name: tests
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }
      - run: pip install -r requirements.txt
      - run: pytest -q
""", language="yaml")

    st.divider()

    # ============== DATAB√ÅZE ==============
    st.subheader("üóÑÔ∏è Datab√°ze")
    st.session_state.done["tools_db_clients"] = st.checkbox(
        "DBeaver / pgAdmin / MySQL Workbench (GUI pro SQL)",
        value=st.session_state.done["tools_db_clients"]
    )
    with st.expander("üéì Jak do toho zapad√° MySQL, MS SQL, Oracle, PHP?"):
        st.markdown("""
- **MySQL, PostgreSQL, MS SQL, Oracle** = **S≈òBD** (datab√°zov√© servery).  
- **DBeaver/pgAdmin/MySQL Workbench** = **GUI klienti** pro pr√°ci s tƒõmito DB.  
- **SQL** je jazyk dotaz≈Ø (SELECT/INSERT/UPDATE/DELETE, JOINy).  
- **PHP** je **programovac√≠ jazyk** pro backend ‚Äì m≈Ø≈æe se p≈ôes **SQL driver** p≈ôipojit k DB (stejnƒõ jako Python/Java/JS).
""")

    st.divider()

    # ============== DOPL≈áKOV√â ==============
    st.subheader("üß© Dopl≈àkov√©")
    c1, c2, c3 = st.columns(3)
    with c1:
        st.session_state.done["tools_docker"] = st.checkbox(
            "Docker ‚Äì lok√°ln√≠ dev/test prost≈ôed√≠",
            value=st.session_state.done["tools_docker"]
        )
    with c2:
        st.session_state.done["tools_ide"] = st.checkbox(
            "IDE: VS Code / PyCharm (debugging, linting)",
            value=st.session_state.done["tools_ide"]
        )
    with c3:
        st.session_state.done["tools_perf"] = st.checkbox(
            "V√Ωkonnostn√≠ testy: JMeter / k6 (aspo≈à z√°klady)",
            value=st.session_state.done["tools_perf"]
        )

    st.divider()

    # ============== Export checklistu ==============
    chosen = [label for label, done in st.session_state.done.items()
              if label.startswith("tools_") and done]
    text = "N√°stroje ‚Äì splnƒõno:\n" + "\n".join(f"- {x}" for x in chosen) if chosen else "Zat√≠m nic neza≈°krtnuto."
    st.download_button("‚¨áÔ∏è St√°hnout checklist n√°stroj≈Ø (TXT)", text, "nastroje-checklist.txt")


def page_portfolio():
    st.header("3) Portfolio a pr√°ce")

    # --- tvoje p≈Øvodn√≠ checkboxy (bezpeƒçn√© ƒçten√≠ p≈ôes .get) ---
    st.session_state.done["projects"] = st.checkbox(
        "Miniprojekty na GitHubu",
        value=st.session_state.done.get("projects", False),
    )
    st.session_state.done["readme"] = st.checkbox(
        "README a uk√°zkov√© bug reporty",
        value=st.session_state.done.get("readme", False),
    )
    st.session_state.done["cv"] = st.checkbox(
        "CV + LinkedIn ‚Äì zd≈Øraznit praxi",
        value=st.session_state.done.get("cv", False),
    )

    st.info(
        "Tip: Ka≈æd√Ω projekt = jeden konkr√©tn√≠ skill. Kr√°tk√Ω, ale ƒçiteln√Ω README a p√°r kvalitn√≠ch bug report≈Ø "
        "maj√≠ vƒõt≈°√≠ hodnotu ne≈æ ob≈ô√≠ repo bez popisu."
    )

    st.divider()

    # --- T√Ωdenn√≠ pl√°n (TV≈ÆJ P≈ÆVODN√ç K√ìD ‚Äì nechan√Ω beze zmƒõn) ---
    with st.form("plan"):
        st.subheader("üó∫Ô∏è T√Ωdenn√≠ pl√°n")
        jmeno = st.text_input("Jm√©no (voliteln√©)", "")
        hodin = st.slider("Kolik hodin t√Ωdnƒõ zvl√°dne≈°?", 1, 20, 5)
        fokus = st.selectbox(
            "Hlavn√≠ fokus na t√Ωden",
            ["Z√°klady", "API testov√°n√≠", "Automatizace", "Portfolio/README"],
        )
        submit = st.form_submit_button("Vygenerovat pl√°n")
        if submit:
            body = {
                "Z√°klady": [
                    "‚Ä¢ 2 h Git + GitHub",
                    "‚Ä¢ 2 h HTML/CSS/JS",
                    "‚Ä¢ 1 h SQL",
                ],
                "API testov√°n√≠": [
                    "‚Ä¢ 2 h Postman z√°klady",
                    "‚Ä¢ 2 h psan√≠ request≈Ø",
                    "‚Ä¢ 1 h dokumentace",
                ],
                "Automatizace": [
                    "‚Ä¢ 2 h Python",
                    "‚Ä¢ 2 h Playwright/pytest",
                    "‚Ä¢ 1 h refaktor",
                ],
                "Portfolio/README": [
                    "‚Ä¢ 2 h README + uk√°zky",
                    "‚Ä¢ 2 h miniprojekt",
                    "‚Ä¢ 1 h polishing",
                ],
            }
            st.success((f"{jmeno}, " if jmeno else "") + f"tv≈Øj pl√°n na {hodin} h/t√Ωden:")
            st.write("\n".join(body[fokus]))

    st.divider()

    # --- Gener√°tor README pro miniprojekt ---
    st.subheader("üß© Gener√°tor README.md pro miniprojekt")
    with st.form("readme_form"):
        proj = st.text_input("N√°zev projektu", "qa-api-tests")
        popis = st.text_area("Kr√°tk√Ω popis", "Sada API test≈Ø pro demo slu≈æbu (REST).")
        technologie = st.text_input("Technologie", "Python, pytest, requests, Postman")
        kroky = st.text_area("Jak spustit", "pip install -r requirements.txt\npytest -q")
        co_testuju = st.text_area(
            "Co se testuje",
            "- Smoke testy endpoint≈Ø\n- Pozitivn√≠/negativn√≠ sc√©n√°≈ôe\n- Validace status k√≥d≈Ø a JSON schema"
        )
        odkaz = st.text_input("Odkaz (repo / appka)", "https://github.com/uzivatel/qa-api-tests")
        submit_readme = st.form_submit_button("Vygenerovat README")
        if submit_readme:
            md = f"""# {proj}

{popis}

## Technologie
{technologie}

## Jak spustit

## Co se testuje
{co_testuju}

## Odkazy
- Repo/App: {odkaz}
"""
            st.code(md, language="markdown")
            st.download_button("‚¨áÔ∏è St√°hnout README.md", md, file_name="README.md")

    st.divider()

    # --- ≈†ablony ke sta≈æen√≠ (bug report, test case) ---
    st.subheader("üìë ≈†ablony do portfolia")
    bug = """N√°zev: [Checkout] 500 p≈ôi pr√°zdn√©m ko≈°√≠ku
Prost≈ôed√≠: test, v1.2.3 (build #456), Chrome 127
Kroky: 1) Otev≈ô√≠t /checkout 2) Kliknout ‚ÄûZaplatit‚Äú s pr√°zdn√Ωm ko≈°√≠kem
Oƒçek√°van√©: Validace ‚ÄûKo≈°√≠k je pr√°zdn√Ω‚Äú
Aktu√°ln√≠: HTTP 500, b√≠l√° str√°nka
D≈Økazy: screenshot.png, network.har
Sev/Pri: High / P1  Pozn.: Regrese od v1.2.2
"""
    tc = """ID: TC-LOGIN-001
C√≠l: P≈ôihl√°≈°en√≠ validn√≠ho u≈æivatele
Kroky: 1) Otev≈ô√≠t /login  2) Vyplnit platn√© √∫daje  3) Odeslat
Oƒçek√°van√©: P≈ôesmƒõrov√°n√≠ na /dashboard
Priorita: P1  Data: user@test.com / *****  Stav: PASS/FAIL
"""
    st.download_button("‚¨áÔ∏è St√°hnout Bug report (MD)", bug, file_name="bug-report.md")
    st.download_button("‚¨áÔ∏è St√°hnout Test Case (MD)", tc, file_name="test-case.md")

    st.divider()

    # --- N√°pady na miniprojekty + checklist export ---
    st.subheader("üí° N√°pady na miniprojekty")
    st.markdown("""
- **API testy**: kolekce v Postmanu + README (JSONPlaceholder/Swagger Petstore)  
- **UI testy**: 3‚Äì5 sc√©n√°≈ô≈Ø v Playwrightu (login, ko≈°√≠k, vyhled√°v√°n√≠)  
- **SQL cviƒçen√≠**: slo≈æka `sql/` se z√°znamy dotaz≈Ø + vysvƒõtlen√≠  
- **DevTools**: anal√Ωza `Network` pro 1 sc√©n√°≈ô (screenshoty, popis)  
- **Logy**: kr√°tk√Ω ƒçl√°nek ‚Äûco jsem na≈°la v application logu p≈ôi chybƒõ 500‚Äú
""")

    chosen = [k for k, v in st.session_state.done.items() if k in ("projects", "readme", "cv") and v]
    text = "Portfolio ‚Äì splnƒõno:\n" + "\n".join(f"- {x}" for x in chosen) if chosen else "Zat√≠m nic neza≈°krtnuto."
    st.download_button("‚¨áÔ∏è St√°hnout checklist portfolia (TXT)", text, "portfolio-checklist.txt")

    with st.form("plan"):
        st.subheader("üó∫Ô∏è T√Ωdenn√≠ pl√°n")
        jmeno = st.text_input("Jm√©no (voliteln√©)", "")
        hodin = st.slider("Kolik hodin t√Ωdnƒõ zvl√°dne≈°?", 1, 20, 5)
        fokus = st.selectbox(
            "Hlavn√≠ fokus na t√Ωden",
            ["Z√°klady", "API testov√°n√≠", "Automatizace", "Portfolio/README"],
        )
        submit = st.form_submit_button("Vygenerovat pl√°n")
        if submit:
            body = {
                "Z√°klady": [
                    "‚Ä¢ 2 h Git + GitHub",
                    "‚Ä¢ 2 h HTML/CSS/JS",
                    "‚Ä¢ 1 h SQL",
                ],
                "API testov√°n√≠": [
                    "‚Ä¢ 2 h Postman z√°klady",
                    "‚Ä¢ 2 h psan√≠ request≈Ø",
                    "‚Ä¢ 1 h dokumentace",
                ],
                "Automatizace": [
                    "‚Ä¢ 2 h Python",
                    "‚Ä¢ 2 h Playwright/pytest",
                    "‚Ä¢ 1 h refaktor",
                ],
                "Portfolio/README": [
                    "‚Ä¢ 2 h README + uk√°zky",
                    "‚Ä¢ 2 h miniprojekt",
                    "‚Ä¢ 1 h polishing",
                ],
            }
            st.success((f"{jmeno}, " if jmeno else "") + f"tv≈Øj pl√°n na {hodin} h/t√Ωden:")
            st.write("\n".join(body[fokus]))

def page_kviz():
    st.header("üß© Mini kv√≠z")
    odp = st.radio(
        "Co je Pull Request (PR) na GitHubu?",
        [
            "P≈ô√≠m√© nahr√°n√≠ k√≥du do main",
            "N√°vrh zmƒõn z vƒõtve, kter√Ω ostatn√≠ zkontroluj√≠ a slouƒç√≠",
            "Z√°loha repozit√°≈ôe",
        ],
    )
    if st.button("Vyhodnotit"):
        if odp == "N√°vrh zmƒõn z vƒõtve, kter√Ω ostatn√≠ zkontroluj√≠ a slouƒç√≠":
            st.success("Spr√°vnƒõ! üëç")
        else:
            st.error("Je≈°tƒõ jednou: PR je n√°vrh zmƒõn z vƒõtve, kter√Ω se po schv√°len√≠ mergne do main.")

def page_timeline():
    st.header("üóìÔ∏è Doporuƒçen√° timeline")
    timeline = pd.DataFrame(
        {
            "T√Ωden": ["1", "2", "3", "4"],
            "Fokus": ["Z√°klady + Git", "API testov√°n√≠", "Automatizace", "Portfolio/README"],
        }
    )
    st.table(timeline)

def page_zdroje():
    st.header("üìö U≈æiteƒçn√© zdroje ‚Äì kur√°torsk√Ω seznam")

    st.markdown("#### Git & GitHub")
    st.markdown("""
- [Pro Git (kniha zdarma)](https://git-scm.com/book/en/v2)  
- [Atlassian Git Tutorials (vƒõtve, rebase, workflow)](https://www.atlassian.com/git)  
- [GitHub Docs ‚Äì Pull Requests](https://docs.github.com/pull-requests)  
- [Oh My Git! (interaktivn√≠ hra)](https://ohmygit.org/)  
- [Learn Git Branching (vizu√°ln√≠ tr√©nink vƒõtv√≠)](https://learngitbranching.js.org/)
""")

    st.markdown("#### Markdown, README, dokumentace")
    st.markdown("""
- [GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/)  
- [Readme.so (WYSIWYG editor README)](https://readme.so/)
""")

    st.markdown("#### Web z√°klady (HTML/CSS/JS)")
    st.markdown("""
- [MDN Web Docs ‚Äì HTML](https://developer.mozilla.org/docs/Web/HTML)  
- [MDN Web Docs ‚Äì CSS](https://developer.mozilla.org/docs/Web/CSS)  
- [MDN Web Docs ‚Äì JavaScript](https://developer.mozilla.org/docs/Web/JavaScript)  
- [Flexbox Froggy (hra na layout)](https://flexboxfroggy.com/)  
- [Grid Garden (CSS Grid)](https://cssgridgarden.com/)
""")

    st.markdown("#### SQL & datab√°ze")
    st.markdown("""
- [SQLBolt (interaktivn√≠ lekce)](https://sqlbolt.com/)  
- [Mode SQL Tutorial (praktick√© dotazy)](https://mode.com/sql-tutorial/)  
- [PostgreSQL Tutorial](https://www.postgresql.org/docs/)  
- [Database Normalization (p≈ôehled)](https://www.guru99.com/database-normalization.html)
""")

    st.markdown("#### API, HTTP & Postman")
    st.markdown("""
- [HTTP status codes ‚Äì p≈ôehled](https://httpstatuses.com/)  
- [Postman Learning Center](https://learning.postman.com/)  
- [JSONPlaceholder (testovac√≠ REST API)](https://jsonplaceholder.typicode.com/)  
- [Swagger Petstore (OpenAPI demo)](https://petstore.swagger.io/)  
- [SOAP UI ‚Äì dokumentace](https://www.soapui.org/)
""")

    st.markdown("#### Python, testy a automatizace")
    st.markdown("""
- [Python Tutorial (ofici√°ln√≠)](https://docs.python.org/3/tutorial/)  
- [pytest ‚Äì dokumentace](https://docs.pytest.org/)  
- [Playwright for Python](https://playwright.dev/python/)  
- [Selenium Docs](https://www.selenium.dev/documentation/)  
- [Awesome Python Testing (sb√≠rka zdroj≈Ø)](https://github.com/atinfo/awesome-test-automation)
""")

    st.markdown("#### DevTools, logy, Linux")
    st.markdown("""
- [Chrome DevTools ‚Äì Overview](https://developer.chrome.com/docs/devtools)  
- [Logy v Linuxu (journald)](https://www.freedesktop.org/software/systemd/man/latest/journalctl.html)  
- [Explainshell (co dƒõl√° p≈ô√≠kaz)](https://explainshell.com/)
""")

    st.markdown("#### CI/CD")
    st.markdown("""
- [GitHub Actions ‚Äì docs](https://docs.github.com/actions)  
- [GitLab CI/CD ‚Äì docs](https://docs.gitlab.com/ee/ci/)
""")

    st.markdown("#### Docker & prost≈ôed√≠")
    st.markdown("""
- [Docker ‚Äì Get Started](https://docs.docker.com/get-started/)  
- [Play with Docker (online sandbox)](https://labs.play-with-docker.com/)
""")

    st.markdown("#### Bezpeƒçnost & v√Ωkon")
    st.markdown("""
- [PortSwigger Web Security Academy (XSS, SQLi‚Ä¶)](https://portswigger.net/web-security)  
- [OWASP Top 10 (nejƒçastƒõj≈°√≠ rizika)](https://owasp.org/www-project-top-ten/)  
- [k6 ‚Äì performance testing](https://k6.io/docs/)  
- [Apache JMeter ‚Äì User Manual](https://jmeter.apache.org/usermanual/)
""")

    st.markdown("#### Streamlit")
    st.markdown("""
- [Streamlit ‚Äì dokumentace](https://docs.streamlit.io/)  
- [Gallery (inspirace aplikac√≠)](https://streamlit.io/gallery)
""")

    # Volitelnƒõ: st√°hnout si seznam jako Markdown
    resources_md = """
# U≈æiteƒçn√© zdroje (QA starter pack)
- Git & GitHub: Pro Git, Atlassian Git Tutorials, PR workflow‚Ä¶
- Web: MDN (HTML/CSS/JS), Flexbox Froggy, Grid Garden
- SQL: SQLBolt, Mode SQL, Normalizace
- API: HTTP status codes, Postman LC, Swagger Petstore, JSONPlaceholder
- Python/Testing: Python tutorial, pytest, Playwright, Selenium
- DevTools/Logy: Chrome DevTools, journald
- CI/CD: GitHub Actions, GitLab CI
- Docker: Get Started, Play with Docker
- Security/Performance: PortSwigger Academy, OWASP Top 10, k6, JMeter
- Streamlit: Docs, Gallery
"""
    st.download_button("‚¨áÔ∏è St√°hnout seznam zdroj≈Ø (Markdown)", resources_md, file_name="uzitecne-zdroje.md")

def page_teorie():
    st.header("üìñ Z√°kladn√≠ teorie testov√°n√≠")

    st.subheader("Typy test≈Ø")
    st.markdown("""
- **Funkƒçn√≠** vs. **Nefunkƒçn√≠**  
- **Smoke**, **Sanity**, **Regresn√≠**  
- **Jednotkov√© (unit)**, **Integraƒçn√≠**, **Syst√©mov√©**, **Akceptaƒçn√≠**
""")

    st.subheader("Verifikace vs. Validace")
    st.markdown("""
- **Verifikace** = Ovƒõ≈ôuji, zda produkt odpov√≠d√° specifikaci (*Stav√≠me spr√°vnƒõ?*).  
- **Validace** = Ovƒõ≈ôuji, zda produkt spl≈àuje pot≈ôeby u≈æivatele (*Stav√≠me spr√°vnou vƒõc?*).
""")

    st.subheader("Severity vs. Priorita")
    st.markdown("""
- **Severity** = jak v√°≈æn√° je chyba (dopad).  
- **Priorita** = jak rychle se m√° opravit (po≈ôad√≠ pr√°ce).
""")

    st.subheader("Bug vs. Defect vs. Failure")
    st.markdown("""
- **Bug** = chyba nalezen√° p≈ôi testov√°n√≠.  
- **Defect** = nesoulad se specifikac√≠ (vƒõt≈°inou v k√≥du).  
- **Failure** = projev chyby v bƒõ≈æ√≠c√≠m syst√©mu.
""")

    st.subheader("API z√°klady")
    st.markdown("""
- **API** = rozhran√≠ pro komunikaci mezi syst√©my.  
- **HTTP metody**: GET, POST, PUT, PATCH, DELETE  
- **Status k√≥dy**: 200 OK, 201 Created, 204 No Content, 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 500 Server Error  
- **REST + JSON** (lehk√©, bƒõ≈æn√©), **SOAP + XML** (form√°lnƒõj≈°√≠, ƒçasto enterprise).
""")

    st.subheader("Metody testov√°n√≠ (Black/White/Gray box)")
    st.markdown("""
- **Blackbox** = testuji vstupy/v√Ωstupy, ne≈ôe≈°√≠m k√≥d.  
- **Whitebox** = zn√°m vnit≈ôn√≠ strukturu k√≥du.  
- **Graybox** = nƒõco z obou (nap≈ô. zn√°≈° sch√©mata DB, logiku).
""")

    st.subheader("SQL ‚Äì z√°klady")
    st.markdown("""
- **DDL**: `CREATE`, `ALTER`, `DROP`  
- **DML**: `INSERT`, `UPDATE`, `DELETE`  
- **DQL**: `SELECT`  
- **DCL**: `GRANT`, `REVOKE`  
- **JOIN**: `INNER`, `LEFT`, `RIGHT`  
- **Prim√°rn√≠ kl√≠ƒç** = jednoznaƒçn√Ω identifik√°tor z√°znamu  
- **Ciz√≠ kl√≠ƒç** = odkaz na prim√°rn√≠ kl√≠ƒç jin√© tabulky
""")

    st.subheader("Logy ‚Äì typy")
    st.markdown("""
- **Application log** (chyby v aplikaci)  
- **System log** (OS, slu≈æby)  
- **Security log** (p≈ôihl√°≈°en√≠, audit)
""")

    st.subheader("BDD ‚Äì Behavior Driven Development")
    st.markdown("""
**Given** (p≈ôedpoklad) ‚Äì **When** (akce) ‚Äì **Then** (v√Ωsledek)

P≈ô√≠klad:  
*Given u≈æivatel je p≈ôihl√°≈°en*  
*When klikne na ‚ÄûOdhl√°sit‚Äú*  
*Then syst√©m ho odhl√°s√≠ a p≈ôesmƒõruje na login str√°nku*.
""")

def page_qatahaky():
    st.header("üß≠ QA tah√°k (proces + ≈°ablony)")
    st.markdown("Rychl√© tah√°ky pro praxi testera. St√°hni si ≈°ablony a pou≈æ√≠vej ve sv√Ωch projektech.")

    st.markdown("### 0) P≈ô√≠prava")
    st.write("""
- **C√≠l & rozsah**, **Rizika/priorita**, **Prost≈ôed√≠ & data**, **DoD**
""")
    st.markdown("### 1) N√°vrh test≈Ø")
    st.write("""
- Techniky: ekvivalence, hranice, stavov√© p≈ôechody, pairwise  
- √örovnƒõ: unit/API/UI; typy: funkƒçn√≠, negativn√≠, regresn√≠, smoke  
- Minimal viable set: nejd≈ô√≠v **smoke**, pak kritick√© cesty, pak okraje  
""")
    st.markdown("### 2) Proveden√≠")
    st.write("""
- Scripted + Exploratory ~ 70/30 (timebox 30‚Äì60 min)  
- Evidence: PASS/FAIL, screenshot/log/HAR u fail≈Ø  
- Verzov√°n√≠: dr≈æ v Gitu (README, `tests/`, `testcases.xlsx`)  
""")
    st.markdown("### 3) Bug report ‚Äì ≈°ablona")
    bug = """N√°zev: [Checkout] 500 p≈ôi pr√°zdn√©m ko≈°√≠ku
Prost≈ôed√≠: test, v1.2.3 (build #456), Chrome 127
Kroky: 1) Otev≈ô√≠t /checkout 2) Kliknout ‚ÄûZaplatit‚Äú s pr√°zdn√Ωm ko≈°√≠kem
Oƒçek√°van√©: Validace ‚ÄûKo≈°√≠k je pr√°zdn√Ω‚Äú
Aktu√°ln√≠: HTTP 500, b√≠l√° str√°nka
D≈Økazy: screenshot.png, network.har
Sev/Pri: High / P1  Pozn.: Regrese od v1.2.2
"""
    st.code(bug, language="markdown")
    st.download_button("‚¨áÔ∏è St√°hnout Bug report", bug, file_name="bug-report.md")

    st.markdown("### Test case ‚Äì ≈°ablona")
    tc = """ID: TC-LOGIN-001
C√≠l: P≈ôihl√°≈°en√≠ validn√≠ho u≈æivatele
Kroky: 1) Otev≈ô√≠t /login  2) Vyplnit platn√© √∫daje  3) Odeslat
Oƒçek√°van√©: P≈ôesmƒõrov√°n√≠ na /dashboard
Priorita: P1  Data: user@test.com / *****  Stav: PASS/FAIL
"""
    st.code(tc, language="markdown")
    st.download_button("‚¨áÔ∏è St√°hnout Test Case", tc, file_name="test-case.md")

    st.markdown("### PR checklist")
    pr = """PR checklist:
- [ ] Projde lok√°ln√≠ smoke
- [ ] Test data/seed aktualizov√°ny
- [ ] P≈ôidan√©/zmƒõnƒõn√© testy
- [ ] Bezpeƒçnostn√≠ dopad zhodnocen
- [ ] Aktualizov√°n README/CHANGELOG
"""
    st.code(pr, language="markdown")
    st.download_button("‚¨áÔ∏è St√°hnout PR checklist", pr, file_name="pr-checklist.md")

def page_api_tester():
    st.header("üåê API dokumentace + rychl√Ω tester")

    with st.expander("üìñ Dokumentace (demo: JSONPlaceholder)"):
        st.markdown("""
**Todos API**
- `GET /todos/1` ‚Üí detail jednoho √∫kolu  
- `GET /todos`   ‚Üí seznam √∫kol≈Ø  
- `POST /todos`  ‚Üí vytvo≈ô√≠ nov√Ω √∫kol (JSON body)

**Users API**
- `GET /users/1` ‚Üí detail u≈æivatele  
- `GET /users`   ‚Üí seznam u≈æivatel≈Ø

Z√°kladn√≠ URL: `https://jsonplaceholder.typicode.com`
""")

    colA, colB = st.columns([3, 1])
    with colA:
        url = st.text_input("URL endpointu", "https://jsonplaceholder.typicode.com/todos/1")
    with colB:
        metoda = st.selectbox("Metoda", ["GET", "POST", "PUT", "PATCH", "DELETE"])

    hdrs_default = "Content-Type: application/json"
    headers_text = st.text_area("HTTP headers (Kl√≠ƒç: Hodnota na ≈ô√°dek)", hdrs_default, height=80)
    body_text = st.text_area("Request JSON body (pro POST/PUT/PATCH)", '{\n  "title": "Test √∫kol",\n  "completed": false\n}', height=140)

    exp_col1, exp_col2 = st.columns(2)
    with exp_col1:
        expected_status = st.number_input("Oƒçek√°van√Ω status k√≥d", value=200, step=1)
    with exp_col2:
        validate_json = st.checkbox("Validovat JSON odpovƒõƒè", value=False)

    def parse_headers(text: str) -> dict:
        headers = {}
        for line in text.splitlines():
            if not line.strip() or ":" not in line:
                continue
            k, v = line.split(":", 1)
            headers[k.strip()] = v.strip()
        return headers

    def parse_json_or_none(text: str):
        try:
            return json.loads(text)
        except Exception:
            return None

    if st.button("Spustit dotaz"):
        headers = parse_headers(headers_text)
        json_body = parse_json_or_none(body_text)

        try:
            if metoda == "GET":
                r = requests.get(url, headers=headers, timeout=10)
            elif metoda == "POST":
                r = requests.post(url, headers=headers, json=json_body, timeout=10)
            elif metoda == "PUT":
                r = requests.put(url, headers=headers, json=json_body, timeout=10)
            elif metoda == "PATCH":
                r = requests.patch(url, headers=headers, json=json_body, timeout=10)
            elif metoda == "DELETE":
                r = requests.delete(url, headers=headers, timeout=10)
            else:
                r = None
                st.error("Nezn√°m√° metoda.")

            if r is not None:
                st.write("**Status k√≥d:**", r.status_code)
                if r.headers.get("Content-Type", "").startswith("application/json"):
                    try:
                        st.json(r.json())
                    except Exception:
                        st.text(r.text[:2000])
                else:
                    st.text(r.text[:2000])

                # jednoduch√© PASS/FAIL
                if r.status_code == int(expected_status):
                    st.success(f"PASS ‚Äì status {r.status_code} = oƒçek√°van√Ω {expected_status}")
                else:
                    st.error(f"FAIL ‚Äì status {r.status_code} ‚â† oƒçek√°van√Ω {expected_status}")

                if validate_json:
                    try:
                        _ = r.json()
                        st.info("JSON odpovƒõƒè vypad√° validnƒõ ‚úÖ")
                    except Exception as e:
                        st.warning(f"JSON nelze naƒç√≠st: {e}")

        except Exception as e:
            st.error(f"Chyba p≈ôi vol√°n√≠ API: {e}")

# ========== ROUTER ==========
if menu == "√övod":
    page_uvod()
elif menu == "Z√°klady":
    page_zaklady()
elif menu == "N√°stroje":
    page_nastroje()
elif menu == "Portfolio":
    page_portfolio()
elif menu == "Mini kv√≠z":
    page_kviz()
elif menu == "Timeline":
    page_timeline()
elif menu == "Zdroje":
    page_zdroje()
elif menu == "üìñ Teorie":
    page_teorie()
elif menu == "üß≠ QA tah√°k":
    page_qatahaky()
elif menu == "üåê API tester":
    page_api_tester()

